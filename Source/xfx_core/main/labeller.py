import sys
import re
import logging
import datetime
import traceback
import subprocess
import textwrap

ver_major = 2
ver_minor = 0
ver_build = 0

def make_label():
    """ Returns tuple of label (Windows version format) and full version string of current build """

    # get revision from Git
    full_ver = subprocess.check_output( ['git', 'describe', '--long', '--abbrev=10', '--tags', '--dirty=-dirty'] )
    logging.debug( "Git describe: {0}".format( full_ver ) )
    match = re.match( r'^(?P<tag>[\w.]+)-(?P<rev>\d+)-g(?P<sha>\w+)(?P<dirty>-dirty)?', full_ver )
    ver_revision = match.group( 'rev' )

    res = [ ver_major, ver_minor, ver_build, ver_revision ]
    res.extend( ( match.group( x ) for x in ( 'tag', 'rev', 'sha' ) ) )
    try:
        res.append( match.group( 'dirty' ) or '' )
    except:
        res.append( '' )
    res.append( datetime.datetime.now( ) )
    return res

def inject_build_labels( labels ):
    """ Inject build labels to Python and C++ code. """
    with open( r'.\xfx_engine_ver.cpp', 'w' ) as f:
		f.write( textwrap.dedent( 
		'''
		// This file is automatically generated, don't modify
		#include "xfx.h"
		#include "xfx_engine.h"

		_XFX_BEGIN

		const int Engine::msVersionMajor = {0};
		const int Engine::msVersionMinor = {1};
		const int Engine::msVersionBuild = {2};
		const int Engine::msVersionRevision = {3};
		const String Engine::msVersionBuildDate( "{8}" );
		const String Engine::msVersion( boost::str( xfx::StringFormat( "%d.%d.%d.%d%s - Date %s." ) % Engine::msVersionMajor % Engine::msVersionMinor % Engine::msVersionBuild % Engine::msVersionRevision % "{7}" % Engine::msVersionBuildDate ) );
		const String Engine::msVersionGit( "{4}-{5}-g{6}{7}" );

		_XFX_END
		''' ).format( *labels )
        )

if __name__ == '__main__':
    try:
        logging.basicConfig( level = logging.DEBUG, format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s" )
        logging.info( "Starting build..." )

        labels = make_label()
        logging.info( "Build labels: {0}, {1}".format( labels[0:4], labels[4:8] ) )

        inject_build_labels( labels )

        logging.info( "Build done!" )
    except:
        logging.error( "Build failed" )
        traceback.print_exception( *sys.exc_info() )

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "pack.pypp.hpp"

namespace bp = boost::python;

struct Pack_wrapper : xfx::Pack, bp::wrapper< xfx::Pack > {

    Pack_wrapper( )
    : xfx::Pack( )
      , bp::wrapper< xfx::Pack >(){
        // null constructor
    
    }

    static boost::python::tuple GetFileOffset( ::xfx::Pack const & inst, ::xfx::Pack::FileIterator_t const * const & file ){
        long unsigned int ofs2;
        ::HRESULT result = inst.GetFileOffset(file, ofs2);
        return bp::make_tuple( result, ofs2 );
    }

    static boost::python::tuple GetFileSize( ::xfx::Pack const & inst, ::xfx::Pack::FileIterator_t const * const & file ){
        long unsigned int len2;
        ::HRESULT result = inst.GetFileSize(file, len2);
        return bp::make_tuple( result, len2 );
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & pack_file_name ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( pack_file_name );
        else
            return this->xfx::Pack::LoadFile( pack_file_name );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & pack_file_name ) {
        return xfx::Pack::LoadFile( pack_file_name );
    }

    virtual ::HRESULT LoadMemory( void const * pmemory, long unsigned int filelen ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( pmemory, filelen );
        else
            return this->xfx::Pack::LoadMemory( pmemory, filelen );
    }
    
    
    ::HRESULT default_load_memory( void const * pmemory, long unsigned int filelen ) {
        return xfx::Pack::LoadMemory( pmemory, filelen );
    }

};

void register_Pack_class(){

    { //::xfx::Pack
        typedef bp::class_< Pack_wrapper, bp::bases< xfx::Resource >, boost::noncopyable > Pack_exposer_t;
        Pack_exposer_t Pack_exposer = Pack_exposer_t( "Pack", bp::no_init );
        bp::scope Pack_scope( Pack_exposer );
        { //::xfx::Pack::FileIterator_t
            typedef bp::class_< xfx::Pack::FileIterator_t > FileIterator_t_exposer_t;
            FileIterator_t_exposer_t FileIterator_t_exposer = FileIterator_t_exposer_t( "FileIterator_t" );
            bp::scope FileIterator_t_scope( FileIterator_t_exposer );
            bp::register_ptr_to_python< boost::shared_ptr< xfx::Pack::FileIterator_t const > >( );
            bp::implicitly_convertible< boost::shared_ptr< xfx::Pack::FileIterator_t >, boost::shared_ptr< xfx::Pack::FileIterator_t const > >( );
        }
        Pack_exposer.def( bp::init< >() );
        { //::xfx::Pack::ClosePack
        
            typedef void ( ::xfx::Pack::*close_pack_function_type )(  ) ;
            
            Pack_exposer.def( 
                "close_pack"
                , close_pack_function_type( &::xfx::Pack::ClosePack ) );
        
        }
        { //::xfx::Pack::CreateFromDirectory
        
            typedef ::HRESULT ( ::xfx::Pack::*create_from_directory_function_type )( ::xfx::String const &,::xfx::String const & ) ;
            
            Pack_exposer.def( 
                "create_from_directory"
                , create_from_directory_function_type( &::xfx::Pack::CreateFromDirectory )
                , ( bp::arg("directory_path"), bp::arg("pack_file_name") ) );
        
        }
        { //::xfx::Pack::FindFile
        
            typedef ::xfx::Pack::FileIterator_t const * ( ::xfx::Pack::*find_file_function_type )( ::xfx::String const & ) const;
            
            Pack_exposer.def( 
                "find_file"
                , find_file_function_type( &::xfx::Pack::FindFile )
                , ( bp::arg("file") )
                , bp::return_internal_reference< >() );
        
        }
        { //::xfx::Pack::GetFileName
        
            typedef ::HRESULT ( ::xfx::Pack::*get_file_name_function_type )( ::xfx::Pack::FileIterator_t const * const &,::xfx::String & ) const;
            
            Pack_exposer.def( 
                "get_file_name"
                , get_file_name_function_type( &::xfx::Pack::GetFileName )
                , ( bp::arg("file"), bp::arg("name") ) );
        
        }
        { //::xfx::Pack::GetFileOffset
        
            typedef boost::python::tuple ( *get_file_offset_function_type )( ::xfx::Pack const &,::xfx::Pack::FileIterator_t const * const & );
            
            Pack_exposer.def( 
                "get_file_offset"
                , get_file_offset_function_type( &Pack_wrapper::GetFileOffset )
                , ( bp::arg("inst"), bp::arg("file") ) );
        
        }
        { //::xfx::Pack::GetFileSize
        
            typedef boost::python::tuple ( *get_file_size_function_type )( ::xfx::Pack const &,::xfx::Pack::FileIterator_t const * const & );
            
            Pack_exposer.def( 
                "get_file_size"
                , get_file_size_function_type( &Pack_wrapper::GetFileSize )
                , ( bp::arg("inst"), bp::arg("file") ) );
        
        }
        { //::xfx::Pack::LoadFile
        
            typedef ::HRESULT ( ::xfx::Pack::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( Pack_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            Pack_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::Pack::LoadFile)
                , default_load_file_function_type(&Pack_wrapper::default_load_file)
                , ( bp::arg("pack_file_name") ) );
        
        }
        { //::xfx::Pack::LoadMemory
        
            typedef ::HRESULT ( ::xfx::Pack::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( Pack_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            Pack_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::Pack::LoadMemory)
                , default_load_memory_function_type(&Pack_wrapper::default_load_memory)
                , ( bp::arg("pmemory"), bp::arg("filelen") ) );
        
        }
        { //::xfx::Pack::ReadFile
        
            typedef ::HRESULT ( ::xfx::Pack::*read_file_function_type )( ::xfx::Pack::FileIterator_t const * const &,void * ) const;
            
            Pack_exposer.def( 
                "read_file"
                , read_file_function_type( &::xfx::Pack::ReadFile )
                , ( bp::arg("file"), bp::arg("buf") ) );
        
        }
        { //::xfx::Pack::WriteFile
        
            typedef ::HRESULT ( ::xfx::Pack::*write_file_function_type )( ::xfx::String const &,void const *,long unsigned int ) const;
            
            Pack_exposer.def( 
                "write_file"
                , write_file_function_type( &::xfx::Pack::WriteFile )
                , ( bp::arg("file"), bp::arg("buf"), bp::arg("len") ) );
        
        }
        { //property "first_file"[fget=::xfx::Pack::GetFirstFile]
        
            typedef ::xfx::Pack::FileIterator_t const * ( ::xfx::Pack::*fget )(  ) const;
            
            Pack_exposer.add_property( 
                "first_file"
                , bp::make_function( 
                      fget( &::xfx::Pack::GetFirstFile )
                    , bp::return_internal_reference< >() ) 
                , "get property, built on top of \"xfx::Pack::FileIterator_t const * xfx::Pack::GetFirstFile() const [member function]\"" );
        
        }
        { //property "last_file"[fget=::xfx::Pack::GetLastFile]
        
            typedef ::xfx::Pack::FileIterator_t const * ( ::xfx::Pack::*fget )(  ) const;
            
            Pack_exposer.add_property( 
                "last_file"
                , bp::make_function( 
                      fget( &::xfx::Pack::GetLastFile )
                    , bp::return_internal_reference< >() ) 
                , "get property, built on top of \"xfx::Pack::FileIterator_t const * xfx::Pack::GetLastFile() const [member function]\"" );
        
        }
        { //property "files_count"[fget=::xfx::Pack::GetFilesCount]
        
            typedef unsigned int ( ::xfx::Pack::*fget )(  ) const;
            
            Pack_exposer.add_property( 
                "files_count"
                , fget( &::xfx::Pack::GetFilesCount )
                , "get property, built on top of \"unsigned int xfx::Pack::GetFilesCount() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Pack > >();
        bp::implicitly_convertible< boost::shared_ptr< xfx::Pack >, boost::shared_ptr< xfx::Resource > >();
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Pack const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Pack >, boost::shared_ptr< xfx::Pack const > >( );
    }

}

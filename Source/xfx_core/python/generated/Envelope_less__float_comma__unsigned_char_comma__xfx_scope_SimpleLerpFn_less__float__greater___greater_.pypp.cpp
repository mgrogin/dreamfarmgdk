// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "envelope_less__float_comma__unsigned_char_comma__xfx_scope_simplelerpfn_less__float__greater___greater_.pypp.hpp"

namespace bp = boost::python;

static boost::python::tuple ParseEnvelope_b97c5893dd0175dd49301901a8a8fd78( unsigned int pos, ::std::string const & str ){
    xfx::Envelope<float, unsigned char, xfx::SimpleLerpFn<float> > env2;
    ::HRESULT result = ::xfx::Envelope<float, unsigned char, xfx::SimpleLerpFn<float> >::ParseEnvelope(env2, pos, str);
    return bp::make_tuple( result, env2, pos );
}

void register_Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__class(){

    { //::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >
        typedef bp::class_< xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > > > Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer_t;
        Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer_t Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer = Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer_t( "Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater_", bp::init< >() );
        bp::scope Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__scope( Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer );
        { //::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::AddKey
        
            typedef xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > > exported_class_t;
            typedef void ( exported_class_t::*add_key_function_type )( unsigned char const &,float const & ) ;
            
            Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer.def( 
                "add_key"
                , add_key_function_type( &::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::AddKey )
                , ( bp::arg("t"), bp::arg("key") ) );
        
        }
        { //::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::Clear
        
            typedef xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer.def( 
                "clear"
                , clear_function_type( &::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::Clear ) );
        
        }
        { //::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::Key
        
            typedef xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > > exported_class_t;
            typedef float ( exported_class_t::*key_function_type )( unsigned char const & ) const;
            
            Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer.def( 
                "key"
                , key_function_type( &::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::Key )
                , ( bp::arg("t") ) );
        
        }
        { //::xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > >::ParseEnvelope
        
            typedef xfx::Envelope< float, unsigned char, xfx::SimpleLerpFn< float > > exported_class_t;
            typedef boost::python::tuple ( *parse_envelope_function_type )( unsigned int,::std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & );
            
            Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer.def( 
                "parse_envelope"
                , parse_envelope_function_type( &ParseEnvelope_b97c5893dd0175dd49301901a8a8fd78 )
                , ( bp::arg("pos"), bp::arg("str") ) );
        
        }
        Envelope_less__float_comma__unsigned_char_comma__xfx_scope_SimpleLerpFn_less__float__greater___greater__exposer.staticmethod( "parse_envelope" );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Envelope<float, unsigned char, xfx::SimpleLerpFn<float> > const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Envelope<float, unsigned char, xfx::SimpleLerpFn<float> > >, boost::shared_ptr< xfx::Envelope<float, unsigned char, xfx::SimpleLerpFn<float> > const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "resource.pypp.hpp"

namespace bp = boost::python;

struct Resource_wrapper : xfx::Resource, bp::wrapper< xfx::Resource > {

    Resource_wrapper(xfx::Resource const & arg )
    : xfx::Resource( arg )
      , bp::wrapper< xfx::Resource >(){
        // copy constructor
        
    }

    Resource_wrapper(char const * name )
    : xfx::Resource( name )
      , bp::wrapper< xfx::Resource >(){
        // constructor
    
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & filename ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( filename );
        else
            return this->xfx::Resource::LoadFile( filename );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & filename ) {
        return xfx::Resource::LoadFile( filename );
    }

    virtual ::HRESULT LoadMemory( void const * arg0, long unsigned int arg1 ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( arg0, arg1 );
        else
            return this->xfx::Resource::LoadMemory( arg0, arg1 );
    }
    
    
    ::HRESULT default_load_memory( void const * arg0, long unsigned int arg1 ) {
        return xfx::Resource::LoadMemory( arg0, arg1 );
    }

};

void register_Resource_class(){

    { //::xfx::Resource
        typedef bp::class_< Resource_wrapper > Resource_exposer_t;
        Resource_exposer_t Resource_exposer = Resource_exposer_t( "Resource", bp::init< char const * >(( bp::arg("name") )) );
        bp::scope Resource_scope( Resource_exposer );
        bp::implicitly_convertible< char const *, xfx::Resource >();
        { //::xfx::Resource::LoadFile
        
            typedef ::HRESULT ( ::xfx::Resource::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( Resource_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            Resource_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::Resource::LoadFile)
                , default_load_file_function_type(&Resource_wrapper::default_load_file)
                , ( bp::arg("filename") ) );
        
        }
        { //::xfx::Resource::LoadMemory
        
            typedef ::HRESULT ( ::xfx::Resource::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( Resource_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            Resource_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::Resource::LoadMemory)
                , default_load_memory_function_type(&Resource_wrapper::default_load_memory)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::xfx::Resource::ToString
        
            typedef ::xfx::String ( ::xfx::Resource::*__repr___function_type )(  ) const;
            
            Resource_exposer.def( 
                "__repr__"
                , __repr___function_type( &::xfx::Resource::ToString ) );
        
        }
        { //property "name"[fget=::xfx::Resource::Name]
        
            typedef ::xfx::String const & ( ::xfx::Resource::*fget )(  ) const;
            
            Resource_exposer.add_property( 
                "name"
                , bp::make_function( 
                      fget( &::xfx::Resource::Name )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::String const & xfx::Resource::Name() const [member function]\"" );
        
        }
        { //property "filename"[fget=::xfx::Resource::Filename]
        
            typedef ::xfx::String const & ( ::xfx::Resource::*fget )(  ) const;
            
            Resource_exposer.add_property( 
                "filename"
                , bp::make_function( 
                      fget( &::xfx::Resource::Filename )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::String const & xfx::Resource::Filename() const [member function]\"" );
        
        }
        { //property "physical_path"[fget=::xfx::Resource::PhysicalPath]
        
            typedef ::xfx::String const & ( ::xfx::Resource::*fget )(  ) const;
            
            Resource_exposer.add_property( 
                "physical_path"
                , bp::make_function( 
                      fget( &::xfx::Resource::PhysicalPath )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::String const & xfx::Resource::PhysicalPath() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Resource const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Resource >, boost::shared_ptr< xfx::Resource const > >( );
    }

}

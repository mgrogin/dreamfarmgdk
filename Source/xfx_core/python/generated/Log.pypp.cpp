// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "log.pypp.hpp"

namespace bp = boost::python;

void register_Log_class(){

    { //::xfx::Log
        typedef bp::class_< xfx::Log, boost::noncopyable > Log_exposer_t;
        Log_exposer_t Log_exposer = Log_exposer_t( "Log", bp::init< xfx::String const & >(( bp::arg("log_file") )) );
        bp::scope Log_scope( Log_exposer );
        bp::enum_< xfx::Log::EMessageType>("EMessageType")
            .value("EMT_CRITICAL", xfx::Log::EMT_CRITICAL)
            .value("EMT_ERROR", xfx::Log::EMT_ERROR)
            .value("EMT_WARNING", xfx::Log::EMT_WARNING)
            .value("EMT_DEFAULT", xfx::Log::EMT_DEFAULT)
            .export_values()
            ;
        bp::implicitly_convertible< xfx::String const &, xfx::Log >();
        { //::xfx::Log::Print
        
            typedef void ( ::xfx::Log::*print_function_type )( ::xfx::Log::EMessageType const &,::xfx::String const &,::xfx::String const & ) ;
            
            Log_exposer.def( 
                "print"
                , print_function_type( &::xfx::Log::Print )
                , ( bp::arg("type"), bp::arg("msg"), bp::arg("prefix")="" ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Log const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Log >, boost::shared_ptr< xfx::Log const > >( );
    }

}

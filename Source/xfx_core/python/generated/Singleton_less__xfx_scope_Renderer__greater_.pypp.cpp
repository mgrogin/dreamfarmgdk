// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "singleton_less__xfx_scope_renderer__greater_.pypp.hpp"

namespace bp = boost::python;

void register_Singleton_less__xfx_scope_Renderer__greater__class(){

    { //::xfx::Singleton< xfx::Renderer >
        typedef bp::class_< xfx::Singleton< xfx::Renderer >, boost::noncopyable > Singleton_less__xfx_scope_Renderer__greater__exposer_t;
        Singleton_less__xfx_scope_Renderer__greater__exposer_t Singleton_less__xfx_scope_Renderer__greater__exposer = Singleton_less__xfx_scope_Renderer__greater__exposer_t( "Singleton_less__xfx_scope_Renderer__greater_", bp::no_init );
        bp::scope Singleton_less__xfx_scope_Renderer__greater__scope( Singleton_less__xfx_scope_Renderer__greater__exposer );
        { //property "instance"[fget=::xfx::Singleton<xfx::Renderer>::Instance]
        
            typedef xfx::Singleton<xfx::Renderer> fget_class_t;
            
            typedef ::xfx::Renderer & ( *fget )(  );
            
            Singleton_less__xfx_scope_Renderer__greater__exposer.add_static_property( 
                "instance"
                , bp::make_function( 
                      fget( &::xfx::Singleton<xfx::Renderer>::Instance )
                    , bp::return_value_policy< bp::reference_existing_object >() )  );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Singleton<xfx::Renderer> const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Singleton<xfx::Renderer> >, boost::shared_ptr< xfx::Singleton<xfx::Renderer> const > >( );
    }

}

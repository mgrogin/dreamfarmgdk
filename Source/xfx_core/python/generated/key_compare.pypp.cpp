// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "key_compare.pypp.hpp"

namespace bp = boost::python;

void register_key_compare_class(){

    { //::xfx::HashCompare< std::string >
        typedef bp::class_< xfx::HashCompare< std::string > > key_compare_exposer_t;
        key_compare_exposer_t key_compare_exposer = key_compare_exposer_t( "key_compare" );
        bp::scope key_compare_scope( key_compare_exposer );
        { //::xfx::HashCompare< std::string >::operator()
        
            typedef xfx::HashCompare< std::string > exported_class_t;
            typedef ::size_t ( exported_class_t::*__call___function_type )( ::std::string const & ) const;
            
            key_compare_exposer.def( 
                "__call__"
                , __call___function_type( &::xfx::HashCompare< std::string >::operator() )
                , ( bp::arg("a") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::HashCompare<std::string> const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::HashCompare<std::string> >, boost::shared_ptr< xfx::HashCompare<std::string> const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "viewer.pypp.hpp"

namespace bp = boost::python;

void register_Viewer_class(){

    { //::xfx::Viewer
        typedef bp::class_< xfx::Viewer > Viewer_exposer_t;
        Viewer_exposer_t Viewer_exposer = Viewer_exposer_t( "Viewer", bp::init< >() );
        bp::scope Viewer_scope( Viewer_exposer );
        { //::xfx::Viewer::SetVPMatrices
        
            typedef void ( ::xfx::Viewer::*set_vp_matrices_function_type )( bool ) ;
            
            Viewer_exposer.def( 
                "set_vp_matrices"
                , set_vp_matrices_function_type( &::xfx::Viewer::SetVPMatrices )
                , ( bp::arg("set_vpmatrices")=(bool)(true) ) );
        
        }
        { //::xfx::Viewer::SetupFrustum
        
            typedef void ( ::xfx::Viewer::*setup_frustum_function_type )( ::xfx::Mat4 const & ) ;
            
            Viewer_exposer.def( 
                "setup_frustum"
                , setup_frustum_function_type( &::xfx::Viewer::SetupFrustum )
                , ( bp::arg("view_proj") ) );
        
        }
        { //::xfx::Viewer::TestFrustumCulling
        
            typedef bool ( ::xfx::Viewer::*test_frustum_culling_function_type )( ::xfx::Primitives::Sphere const & ) const;
            
            Viewer_exposer.def( 
                "test_frustum_culling"
                , test_frustum_culling_function_type( &::xfx::Viewer::TestFrustumCulling )
                , ( bp::arg("sphere") ) );
        
        }
        { //::xfx::Viewer::TestFrustumCulling
        
            typedef bool ( ::xfx::Viewer::*test_frustum_culling_function_type )( ::xfx::Primitives::AABB const & ) const;
            
            Viewer_exposer.def( 
                "test_frustum_culling"
                , test_frustum_culling_function_type( &::xfx::Viewer::TestFrustumCulling )
                , ( bp::arg("box") ) );
        
        }
        { //::xfx::Viewer::TestFrustumCulling
        
            typedef bool ( ::xfx::Viewer::*test_frustum_culling_function_type )( ::xfx::Primitives::OBB const & ) const;
            
            Viewer_exposer.def( 
                "test_frustum_culling"
                , test_frustum_culling_function_type( &::xfx::Viewer::TestFrustumCulling )
                , ( bp::arg("box") ) );
        
        }
        { //property "position"[fget=::xfx::Viewer::Position, fset=::xfx::Viewer::SetPosition]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Viewer::*fget )(  ) const;
            typedef void ( ::xfx::Viewer::*fset )( ::xfx::Vec3 const & ) ;
            
            Viewer_exposer.add_property( 
                "position"
                , bp::make_function( 
                      fget( &::xfx::Viewer::Position )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Viewer::SetPosition )
                , "get\\set property, built on top of \"xfx::Vec3 const & xfx::Viewer::Position() const [member function]\" and \"void xfx::Viewer::SetPosition(xfx::Vec3 const & p) [member function]\"" );
        
        }
        { //property "rotation"[fget=::xfx::Viewer::Rotation, fset=::xfx::Viewer::SetRotation]
        
            typedef ::xfx::Euler const & ( ::xfx::Viewer::*fget )(  ) const;
            typedef void ( ::xfx::Viewer::*fset )( ::xfx::Euler const & ) ;
            
            Viewer_exposer.add_property( 
                "rotation"
                , bp::make_function( 
                      fget( &::xfx::Viewer::Rotation )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Viewer::SetRotation )
                , "get\\set property, built on top of \"xfx::Euler const & xfx::Viewer::Rotation() const [member function]\" and \"void xfx::Viewer::SetRotation(xfx::Euler const & r) [member function]\"" );
        
        }
        { //property "fov"[fget=::xfx::Viewer::FOV, fset=::xfx::Viewer::SetFOV]
        
            typedef float const & ( ::xfx::Viewer::*fget )(  ) const;
            typedef void ( ::xfx::Viewer::*fset )( float const & ) ;
            
            Viewer_exposer.add_property( 
                "fov"
                , bp::make_function( 
                      fget( &::xfx::Viewer::FOV )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Viewer::SetFOV )
                , "get\\set property, built on top of \"float const & xfx::Viewer::FOV() const [member function]\" and \"void xfx::Viewer::SetFOV(float const & f) [member function]\"" );
        
        }
        { //property "near_plane"[fget=::xfx::Viewer::NearPlane, fset=::xfx::Viewer::SetNearPlane]
        
            typedef float const & ( ::xfx::Viewer::*fget )(  ) const;
            typedef void ( ::xfx::Viewer::*fset )( float const & ) ;
            
            Viewer_exposer.add_property( 
                "near_plane"
                , bp::make_function( 
                      fget( &::xfx::Viewer::NearPlane )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Viewer::SetNearPlane )
                , "get\\set property, built on top of \"float const & xfx::Viewer::NearPlane() const [member function]\" and \"void xfx::Viewer::SetNearPlane(float const & n) [member function]\"" );
        
        }
        { //property "far_plane"[fget=::xfx::Viewer::FarPlane, fset=::xfx::Viewer::SetFarPlane]
        
            typedef float const & ( ::xfx::Viewer::*fget )(  ) const;
            typedef void ( ::xfx::Viewer::*fset )( float const & ) ;
            
            Viewer_exposer.add_property( 
                "far_plane"
                , bp::make_function( 
                      fget( &::xfx::Viewer::FarPlane )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Viewer::SetFarPlane )
                , "get\\set property, built on top of \"float const & xfx::Viewer::FarPlane() const [member function]\" and \"void xfx::Viewer::SetFarPlane(float const & f) [member function]\"" );
        
        }
        { //property "lh"[fget=::xfx::Viewer::IsLH, fset=::xfx::Viewer::SetLH]
        
            typedef bool const & ( ::xfx::Viewer::*fget )(  ) const;
            typedef void ( ::xfx::Viewer::*fset )( bool const & ) ;
            
            Viewer_exposer.add_property( 
                "lh"
                , bp::make_function( 
                      fget( &::xfx::Viewer::IsLH )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Viewer::SetLH )
                , "get\\set property, built on top of \"bool const & xfx::Viewer::IsLH() const [member function]\" and \"void xfx::Viewer::SetLH(bool const & lh) [member function]\"" );
        
        }
        { //property "view"[fget=::xfx::Viewer::GetView]
        
            typedef ::xfx::Mat4 const & ( ::xfx::Viewer::*fget )(  ) const;
            
            Viewer_exposer.add_property( 
                "view"
                , bp::make_function( 
                      fget( &::xfx::Viewer::GetView )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Mat4 const & xfx::Viewer::GetView() const [member function]\"" );
        
        }
        { //property "projection"[fget=::xfx::Viewer::GetProjection]
        
            typedef ::xfx::Mat4 const & ( ::xfx::Viewer::*fget )(  ) const;
            
            Viewer_exposer.add_property( 
                "projection"
                , bp::make_function( 
                      fget( &::xfx::Viewer::GetProjection )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Mat4 const & xfx::Viewer::GetProjection() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Viewer const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Viewer >, boost::shared_ptr< xfx::Viewer const > >( );
    }

}

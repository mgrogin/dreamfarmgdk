// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "vec3.pypp.hpp"

namespace bp = boost::python;

void register_Vec3_class(){

    { //::xfx::Vec3
        typedef bp::class_< xfx::Vec3 > Vec3_exposer_t;
        Vec3_exposer_t Vec3_exposer = Vec3_exposer_t( "Vec3", bp::init< >() );
        bp::scope Vec3_scope( Vec3_exposer );
        Vec3_exposer.def( bp::init< float >(( bp::arg("v") )) );
        bp::implicitly_convertible< float, xfx::Vec3 >();
        Vec3_exposer.def( bp::init< xfx::Vec3 const & >(( bp::arg("v") )) );
        Vec3_exposer.def( bp::init< float, float, float >(( bp::arg("vx"), bp::arg("vy"), bp::arg("vz") )) );
        { //::xfx::Vec3::Clip
        
            typedef void ( *clip_function_type )( ::xfx::Vec3 & );
            
            Vec3_exposer.def( 
                "clip"
                , clip_function_type( &::xfx::Vec3::Clip )
                , ( bp::arg("v") ) );
        
        }
        { //::xfx::Vec3::Cross
        
            typedef ::xfx::Vec3 ( *cross_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const & );
            
            Vec3_exposer.def( 
                "cross"
                , cross_function_type( &::xfx::Vec3::Cross )
                , ( bp::arg("u"), bp::arg("v") ) );
        
        }
        { //::xfx::Vec3::Dot
        
            typedef float ( *dot_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const & );
            
            Vec3_exposer.def( 
                "dot"
                , dot_function_type( &::xfx::Vec3::Dot )
                , ( bp::arg("u"), bp::arg("v") ) );
        
        }
        { //::xfx::Vec3::Lerp
        
            typedef ::xfx::Vec3 ( *lerp_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const &,float const & );
            
            Vec3_exposer.def( 
                "lerp"
                , lerp_function_type( &::xfx::Vec3::Lerp )
                , ( bp::arg("u"), bp::arg("v"), bp::arg("t") ) );
        
        }
        { //::xfx::Vec3::Normalize
        
            typedef void ( ::xfx::Vec3::*normalize_function_type )(  ) ;
            
            Vec3_exposer.def( 
                "normalize"
                , normalize_function_type( &::xfx::Vec3::Normalize ) );
        
        }
        { //::xfx::Vec3::Rand
        
            typedef ::xfx::Vec3 ( *rand_function_type )(  );
            
            Vec3_exposer.def( 
                "rand"
                , rand_function_type( &::xfx::Vec3::Rand ) );
        
        }
        { //::xfx::Vec3::ToString
        
            typedef ::xfx::String ( ::xfx::Vec3::*__repr___function_type )(  ) const;
            
            Vec3_exposer.def( 
                "__repr__"
                , __repr___function_type( &::xfx::Vec3::ToString ) );
        
        }
        Vec3_exposer.def( bp::self *= bp::other< float >() );
        Vec3_exposer.def( bp::self *= bp::self );
        Vec3_exposer.def( bp::self += bp::self );
        Vec3_exposer.def( -bp::self );
        Vec3_exposer.def( bp::self -= bp::self );
        Vec3_exposer.def( bp::self /= bp::other< float >() );
        { //::xfx::Vec3::operator=
        
            typedef ::xfx::Vec3 & ( ::xfx::Vec3::*assign_function_type )( ::xfx::Vec3 const & ) ;
            
            Vec3_exposer.def( 
                "assign"
                , assign_function_type( &::xfx::Vec3::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Vec3::xyz
        
            typedef void ( ::xfx::Vec3::*xyz_function_type )( float,float,float ) ;
            
            Vec3_exposer.def( 
                "xyz"
                , xyz_function_type( &::xfx::Vec3::xyz )
                , ( bp::arg("_x"), bp::arg("_y"), bp::arg("_z") ) );
        
        }
        Vec3_exposer.def_readwrite( "x", &xfx::Vec3::x );
        Vec3_exposer.def_readwrite( "y", &xfx::Vec3::y );
        Vec3_exposer.def_readwrite( "z", &xfx::Vec3::z );
        Vec3_exposer.staticmethod( "clip" );
        Vec3_exposer.staticmethod( "cross" );
        Vec3_exposer.staticmethod( "dot" );
        Vec3_exposer.staticmethod( "lerp" );
        Vec3_exposer.staticmethod( "rand" );
        { //property "normalized"[fget=::xfx::Vec3::GetNormalized]
        
            typedef ::xfx::Vec3 ( ::xfx::Vec3::*fget )(  ) const;
            
            Vec3_exposer.add_property( 
                "normalized"
                , fget( &::xfx::Vec3::GetNormalized )
                , "get property, built on top of \"xfx::Vec3 xfx::Vec3::GetNormalized() const [member function]\"" );
        
        }
        { //property "len_sq"[fget=::xfx::Vec3::LenSq]
        
            typedef float ( ::xfx::Vec3::*fget )(  ) const;
            
            Vec3_exposer.add_property( 
                "len_sq"
                , fget( &::xfx::Vec3::LenSq )
                , "get property, built on top of \"float xfx::Vec3::LenSq() const [member function]\"" );
        
        }
        { //property "len"[fget=::xfx::Vec3::Len]
        
            typedef float ( ::xfx::Vec3::*fget )(  ) const;
            
            Vec3_exposer.add_property( 
                "len"
                , fget( &::xfx::Vec3::Len )
                , "get property, built on top of \"float xfx::Vec3::Len() const [member function]\"" );
        
        }
        Vec3_exposer.def( bp::self != bp::self );
        Vec3_exposer.def( bp::self * bp::other< float >() );
        Vec3_exposer.def( bp::other< float >() * bp::self );
        Vec3_exposer.def( bp::self + bp::self );
        Vec3_exposer.def( bp::self - bp::self );
        Vec3_exposer.def( bp::self / bp::other< float >() );
        Vec3_exposer.def( bp::self < bp::self );
        Vec3_exposer.def( bp::self == bp::self );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Vec3 const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Vec3 >, boost::shared_ptr< xfx::Vec3 const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "font.pypp.hpp"

namespace bp = boost::python;

struct Font_wrapper : xfx::Font, bp::wrapper< xfx::Font > {

    Font_wrapper(xfx::Font const & arg )
    : xfx::Font( arg )
      , bp::wrapper< xfx::Font >(){
        // copy constructor
        
    }

    Font_wrapper( )
    : xfx::Font( )
      , bp::wrapper< xfx::Font >(){
        // null constructor
    
    }

    virtual ::HRESULT Create( unsigned int height, ::boost::shared_ptr< xfx::Shader const > const & shd, ::xfx::WString const & charmapstr ) {
        if( bp::override func_create = this->get_override( "create" ) )
            return func_create( height, shd, charmapstr );
        else
            return this->xfx::Font::Create( height, shd, charmapstr );
    }
    
    
    ::HRESULT default_create( unsigned int height, ::boost::shared_ptr< xfx::Shader const > const & shd, ::xfx::WString const & charmapstr ) {
        return xfx::Font::Create( height, shd, charmapstr );
    }

    virtual ::HRESULT Create( ::boost::shared_ptr< xfx::Shader const > const & shd, ::stdext::hash_map<wchar_t, xfx::Font::CharRectType, stdext::hash_compare<wchar_t, std::less<wchar_t> >, std::allocator<std::pair<wchar_t const, xfx::Font::CharRectType> > > const & char_map ) {
        if( bp::override func_create = this->get_override( "create" ) )
            return func_create( shd, boost::ref(char_map) );
        else
            return this->xfx::Font::Create( shd, boost::ref(char_map) );
    }
    
    
    ::HRESULT default_create( ::boost::shared_ptr< xfx::Shader const > const & shd, ::stdext::hash_map<wchar_t, xfx::Font::CharRectType, stdext::hash_compare<wchar_t, std::less<wchar_t> >, std::allocator<std::pair<wchar_t const, xfx::Font::CharRectType> > > const & char_map ) {
        return xfx::Font::Create( shd, boost::ref(char_map) );
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & filename ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( filename );
        else
            return this->xfx::Resource::LoadFile( filename );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & filename ) {
        return xfx::Resource::LoadFile( filename );
    }

    virtual ::HRESULT LoadMemory( void const * pmemory, long unsigned int filelen ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( pmemory, filelen );
        else
            return this->xfx::ScriptResource::LoadMemory( pmemory, filelen );
    }
    
    
    ::HRESULT default_load_memory( void const * pmemory, long unsigned int filelen ) {
        return xfx::ScriptResource::LoadMemory( pmemory, filelen );
    }

};

void register_Font_class(){

    { //::xfx::Font
        typedef bp::class_< Font_wrapper, bp::bases< xfx::ScriptResource > > Font_exposer_t;
        Font_exposer_t Font_exposer = Font_exposer_t( "Font", bp::init< >() );
        bp::scope Font_scope( Font_exposer );
        { //::xfx::Font::CharRectType
            typedef bp::class_< xfx::Font::CharRectType > CharRectType_exposer_t;
            CharRectType_exposer_t CharRectType_exposer = CharRectType_exposer_t( "CharRectType", bp::init< >() );
            bp::scope CharRectType_scope( CharRectType_exposer );
            CharRectType_exposer.def_readwrite( "x1", &xfx::Font::CharRectType::x1 );
            CharRectType_exposer.def_readwrite( "x2", &xfx::Font::CharRectType::x2 );
            CharRectType_exposer.def_readwrite( "y1", &xfx::Font::CharRectType::y1 );
            CharRectType_exposer.def_readwrite( "y2", &xfx::Font::CharRectType::y2 );
            bp::register_ptr_to_python< boost::shared_ptr< xfx::Font::CharRectType const > >( );
            bp::implicitly_convertible< boost::shared_ptr< xfx::Font::CharRectType >, boost::shared_ptr< xfx::Font::CharRectType const > >( );
        }
        { //::xfx::Font::Create
        
            typedef ::HRESULT ( ::xfx::Font::*create_function_type )( unsigned int,::boost::shared_ptr< xfx::Shader const > const &,::xfx::WString const & ) ;
            typedef ::HRESULT ( Font_wrapper::*default_create_function_type )( unsigned int,::boost::shared_ptr< xfx::Shader const > const &,::xfx::WString const & ) ;
            
            Font_exposer.def( 
                "create"
                , create_function_type(&::xfx::Font::Create)
                , default_create_function_type(&Font_wrapper::default_create)
                , ( bp::arg("height"), bp::arg("shd"), bp::arg("charmapstr") ) );
        
        }
        { //::xfx::Font::Create
        
            typedef ::HRESULT ( ::xfx::Font::*create_function_type )( ::boost::shared_ptr< xfx::Shader const > const &,::stdext::hash_map<wchar_t, xfx::Font::CharRectType, stdext::hash_compare<wchar_t, std::less<wchar_t> >, std::allocator<std::pair<wchar_t const, xfx::Font::CharRectType> > > const & ) ;
            typedef ::HRESULT ( Font_wrapper::*default_create_function_type )( ::boost::shared_ptr< xfx::Shader const > const &,::stdext::hash_map<wchar_t, xfx::Font::CharRectType, stdext::hash_compare<wchar_t, std::less<wchar_t> >, std::allocator<std::pair<wchar_t const, xfx::Font::CharRectType> > > const & ) ;
            
            Font_exposer.def( 
                "create"
                , create_function_type(&::xfx::Font::Create)
                , default_create_function_type(&Font_wrapper::default_create)
                , ( bp::arg("shd"), bp::arg("char_map") ) );
        
        }
        { //::xfx::Resource::LoadFile
        
            typedef ::HRESULT ( ::xfx::Resource::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( Font_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            Font_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::Resource::LoadFile)
                , default_load_file_function_type(&Font_wrapper::default_load_file)
                , ( bp::arg("filename") ) );
        
        }
        { //::xfx::ScriptResource::LoadMemory
        
            typedef ::HRESULT ( ::xfx::ScriptResource::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( Font_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            Font_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::ScriptResource::LoadMemory)
                , default_load_memory_function_type(&Font_wrapper::default_load_memory)
                , ( bp::arg("pmemory"), bp::arg("filelen") ) );
        
        }
        { //property "shader_ptr"[fget=::xfx::Font::ShaderPtr]
        
            typedef ::boost::shared_ptr<xfx::Shader const> const & ( ::xfx::Font::*fget )(  ) const;
            
            Font_exposer.add_property( 
                "shader_ptr"
                , bp::make_function( 
                      fget( &::xfx::Font::ShaderPtr )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"boost::shared_ptr<xfx::Shader const> const & xfx::Font::ShaderPtr() const [member function]\"" );
        
        }
        { //property "char_map_string"[fget=::xfx::Font::CharMapString]
        
            typedef ::xfx::WString const & ( ::xfx::Font::*fget )(  ) const;
            
            Font_exposer.add_property( 
                "char_map_string"
                , bp::make_function( 
                      fget( &::xfx::Font::CharMapString )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::WString const & xfx::Font::CharMapString() const [member function]\"" );
        
        }
        { //property "char_height"[fget=::xfx::Font::CharHeight]
        
            typedef unsigned int const & ( ::xfx::Font::*fget )(  ) const;
            
            Font_exposer.add_property( 
                "char_height"
                , bp::make_function( 
                      fget( &::xfx::Font::CharHeight )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"unsigned int const & xfx::Font::CharHeight() const [member function]\"" );
        
        }
        { //property "char_map"[fget=::xfx::Font::CharMap]
        
            typedef ::stdext::hash_map<wchar_t, xfx::Font::CharRectType, stdext::hash_compare<wchar_t, std::less<wchar_t> >, std::allocator<std::pair<wchar_t const, xfx::Font::CharRectType> > > const & ( ::xfx::Font::*fget )(  ) const;
            
            Font_exposer.add_property( 
                "char_map"
                , bp::make_function( 
                      fget( &::xfx::Font::CharMap )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"stdext::hash_map<wchar_t, xfx::Font::CharRectType, stdext::hash_compare<wchar_t, std::less<wchar_t> >, std::allocator<std::pair<wchar_t const, xfx::Font::CharRectType> > > const & xfx::Font::CharMap() const [member function]\"" );
        
        }
        { //property "texture_width"[fget=::xfx::Font::TextureWidth]
        
            typedef unsigned int const & ( ::xfx::Font::*fget )(  ) const;
            
            Font_exposer.add_property( 
                "texture_width"
                , bp::make_function( 
                      fget( &::xfx::Font::TextureWidth )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"unsigned int const & xfx::Font::TextureWidth() const [member function]\"" );
        
        }
        { //property "texture_height"[fget=::xfx::Font::TextureHeight]
        
            typedef unsigned int const & ( ::xfx::Font::*fget )(  ) const;
            
            Font_exposer.add_property( 
                "texture_height"
                , bp::make_function( 
                      fget( &::xfx::Font::TextureHeight )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"unsigned int const & xfx::Font::TextureHeight() const [member function]\"" );
        
        }
        { //property "cache"[fget=::xfx::Font::Cache]
        
            typedef ::xfx::Cache<xfx::Font> & ( *fget )(  );
            
            Font_exposer.add_static_property( 
                "cache"
                , bp::make_function( 
                      fget( &::xfx::Font::Cache )
                    , bp::return_value_policy< bp::reference_existing_object >() )  );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Font const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Font >, boost::shared_ptr< xfx::Font const > >( );
    }

}

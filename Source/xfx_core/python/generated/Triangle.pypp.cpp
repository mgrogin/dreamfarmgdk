// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "__array_1.pypp.hpp"
#include "xfx_py_bindings.h"
#include "triangle.pypp.hpp"

namespace bp = boost::python;

struct Triangle_wrapper : xfx::Primitives::Triangle, bp::wrapper< xfx::Primitives::Triangle > {

    Triangle_wrapper(xfx::Primitives::Triangle const & arg )
    : xfx::Primitives::Triangle( arg )
      , bp::wrapper< xfx::Primitives::Triangle >(){
        // copy constructor
        
    }

    Triangle_wrapper( )
    : xfx::Primitives::Triangle( )
      , bp::wrapper< xfx::Primitives::Triangle >(){
        // null constructor
    
    }

    Triangle_wrapper(::xfx::Vec3 const & v1, ::xfx::Vec3 const & v2, ::xfx::Vec3 const & v3 )
    : xfx::Primitives::Triangle( boost::ref(v1), boost::ref(v2), boost::ref(v3) )
      , bp::wrapper< xfx::Primitives::Triangle >(){
        // constructor
    
    }

    virtual void Projection( float & a, float & b, ::xfx::Vec3 const & axis ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_projection = this->get_override( "projection" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_projection.ptr(), axis );
            a = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "a" ) );
            b = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "b" ) );
        }
        else{
            xfx::Primitives::Triangle::Projection( a, b, boost::ref(axis) );
        }
    }
    
    static boost::python::tuple default_projection( ::xfx::Primitives::Triangle const & inst, ::xfx::Vec3 const & axis ){
        float a2;
        float b2;
        if( dynamic_cast< Triangle_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::xfx::Primitives::Triangle::Projection(a2, b2, axis);
        }
        else{
            inst.Projection(a2, b2, axis);
        }
        return bp::make_tuple( a2, b2 );
    }

    static pyplusplus::containers::static_sized::array_1_t< ::xfx::Vec3, 3>
    pyplusplus_vertices_wrapper( ::xfx::Primitives::Triangle & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::xfx::Vec3, 3>( inst.vertices );
    }

};

void register_Triangle_class(){

    { //::xfx::Primitives::Triangle
        typedef bp::class_< Triangle_wrapper, bp::bases< xfx::Primitive > > Triangle_exposer_t;
        Triangle_exposer_t Triangle_exposer = Triangle_exposer_t( "Triangle", bp::init< >() );
        bp::scope Triangle_scope( Triangle_exposer );
        Triangle_exposer.def( bp::init< xfx::Vec3 const &, xfx::Vec3 const &, xfx::Vec3 const & >(( bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        { //::xfx::Primitives::Triangle::Projection
        
            typedef boost::python::tuple ( *default_projection_function_type )( ::xfx::Primitives::Triangle const &,::xfx::Vec3 const & );
            
            Triangle_exposer.def( 
                "projection"
                , default_projection_function_type( &Triangle_wrapper::default_projection )
                , ( bp::arg("inst"), bp::arg("axis") ) );
        
        }
        { //::xfx::Primitives::Triangle::Transform
        
            typedef void ( ::xfx::Primitives::Triangle::*transform_function_type )( ::xfx::Mat4 const & ) ;
            
            Triangle_exposer.def( 
                "transform"
                , transform_function_type( &::xfx::Primitives::Triangle::Transform )
                , ( bp::arg("m") ) );
        
        }
        pyplusplus::containers::static_sized::register_array_1< ::xfx::Vec3, 3, bp::return_internal_reference< > >( "__array_1__scope_xfx_scope_Vec3_3" );
        { //xfx::Primitives::Triangle::vertices [variable], type=xfx::Vec3[3]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::xfx::Vec3, 3> ( *array_wrapper_creator )( ::xfx::Primitives::Triangle & );
            
            Triangle_exposer.add_property( "vertices"
                , bp::make_function( array_wrapper_creator(&Triangle_wrapper::pyplusplus_vertices_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Primitives::Triangle const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Primitives::Triangle >, boost::shared_ptr< xfx::Primitives::Triangle const > >( );
    }

}

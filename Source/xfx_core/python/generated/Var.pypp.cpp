// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "var.pypp.hpp"

namespace bp = boost::python;

void register_Var_class(){

    { //::xfx::Var
        typedef bp::class_< xfx::Var > Var_exposer_t;
        Var_exposer_t Var_exposer = Var_exposer_t( "Var", bp::init< bp::optional< xfx::String const & > >(( bp::arg("def")="" )) );
        bp::scope Var_scope( Var_exposer );
        bp::implicitly_convertible< xfx::String const &, xfx::Var >();
        { //::xfx::Var::Change
        
            typedef void ( ::xfx::Var::*change_function_type )( ::xfx::String const & ) ;
            
            Var_exposer.def( 
                "change"
                , change_function_type( &::xfx::Var::Change )
                , ( bp::arg("val") ) );
        
        }
        { //::xfx::Var::Reset
        
            typedef void ( ::xfx::Var::*reset_function_type )(  ) ;
            
            Var_exposer.def( 
                "reset"
                , reset_function_type( &::xfx::Var::Reset ) );
        
        }
        { //property "default"[fget=::xfx::Var::Default]
        
            typedef ::xfx::String const & ( ::xfx::Var::*fget )(  ) const;
            
            Var_exposer.add_property( 
                "default"
                , bp::make_function( 
                      fget( &::xfx::Var::Default )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::String const & xfx::Var::Default() const [member function]\"" );
        
        }
        { //property "value"[fget=::xfx::Var::Value]
        
            typedef ::xfx::String const & ( ::xfx::Var::*fget )(  ) const;
            
            Var_exposer.add_property( 
                "value"
                , bp::make_function( 
                      fget( &::xfx::Var::Value )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::String const & xfx::Var::Value() const [member function]\"" );
        
        }
        { //property "as_float"[fget=::xfx::Var::AsFloat]
        
            typedef float const & ( ::xfx::Var::*fget )(  ) const;
            
            Var_exposer.add_property( 
                "as_float"
                , bp::make_function( 
                      fget( &::xfx::Var::AsFloat )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"float const & xfx::Var::AsFloat() const [member function]\"" );
        
        }
        { //property "as_int"[fget=::xfx::Var::AsInt]
        
            typedef int const & ( ::xfx::Var::*fget )(  ) const;
            
            Var_exposer.add_property( 
                "as_int"
                , bp::make_function( 
                      fget( &::xfx::Var::AsInt )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"int const & xfx::Var::AsInt() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Var > >();
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Var const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Var >, boost::shared_ptr< xfx::Var const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "mesh.pypp.hpp"

namespace bp = boost::python;

struct Mesh_wrapper : xfx::Mesh, bp::wrapper< xfx::Mesh > {

    Mesh_wrapper(xfx::Mesh const & arg )
    : xfx::Mesh( arg )
      , bp::wrapper< xfx::Mesh >(){
        // copy constructor
        
    }

    Mesh_wrapper( )
    : xfx::Mesh( )
      , bp::wrapper< xfx::Mesh >(){
        // null constructor
    
    }

    virtual ::HRESULT LoadMemory( void const * memory, long unsigned int filelen ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( memory, filelen );
        else
            return this->xfx::Mesh::LoadMemory( memory, filelen );
    }
    
    
    ::HRESULT default_load_memory( void const * memory, long unsigned int filelen ) {
        return xfx::Mesh::LoadMemory( memory, filelen );
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & filename ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( filename );
        else
            return this->xfx::Resource::LoadFile( filename );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & filename ) {
        return xfx::Resource::LoadFile( filename );
    }

};

void register_Mesh_class(){

    { //::xfx::Mesh
        typedef bp::class_< Mesh_wrapper, bp::bases< xfx::Resource > > Mesh_exposer_t;
        Mesh_exposer_t Mesh_exposer = Mesh_exposer_t( "Mesh", bp::init< >() );
        bp::scope Mesh_scope( Mesh_exposer );
        bp::scope().attr("MODEL_FILE_VER") = (int)xfx::Mesh::MODEL_FILE_VER;
        { //::xfx::Mesh::Animation
            typedef bp::class_< xfx::Mesh::Animation > Animation_exposer_t;
            Animation_exposer_t Animation_exposer = Animation_exposer_t( "Animation" );
            bp::scope Animation_scope( Animation_exposer );
            Animation_exposer.def_readwrite( "end_frame", &xfx::Mesh::Animation::end_frame );
            Animation_exposer.def_readwrite( "fps", &xfx::Mesh::Animation::fps );
            Animation_exposer.def_readwrite( "start_frame", &xfx::Mesh::Animation::start_frame );
            bp::register_ptr_to_python< boost::shared_ptr< xfx::Mesh::Animation const > >( );
            bp::implicitly_convertible< boost::shared_ptr< xfx::Mesh::Animation >, boost::shared_ptr< xfx::Mesh::Animation const > >( );
        }
        { //::xfx::Mesh::LoadMemory
        
            typedef ::HRESULT ( ::xfx::Mesh::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( Mesh_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            Mesh_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::Mesh::LoadMemory)
                , default_load_memory_function_type(&Mesh_wrapper::default_load_memory)
                , ( bp::arg("memory"), bp::arg("filelen") ) );
        
        }
        { //::xfx::Mesh::Render
        
            typedef void ( ::xfx::Mesh::*render_function_type )( ::xfx::MeshState const & ) const;
            
            Mesh_exposer.def( 
                "render"
                , render_function_type( &::xfx::Mesh::Render )
                , ( bp::arg("state") ) );
        
        }
        { //::xfx::Resource::LoadFile
        
            typedef ::HRESULT ( ::xfx::Resource::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( Mesh_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            Mesh_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::Resource::LoadFile)
                , default_load_file_function_type(&Mesh_wrapper::default_load_file)
                , ( bp::arg("filename") ) );
        
        }
        { //property "animations"[fget=::xfx::Mesh::Animations]
        
            typedef ::stdext::hash_map<std::string, xfx::Mesh::Animation, stdext::hash_compare<std::string, std::less<std::string> >, std::allocator<std::pair<std::string const, xfx::Mesh::Animation> > > const & ( ::xfx::Mesh::*fget )(  ) const;
            
            Mesh_exposer.add_property( 
                "animations"
                , bp::make_function( 
                      fget( &::xfx::Mesh::Animations )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"stdext::hash_map<std::string, xfx::Mesh::Animation, stdext::hash_compare<std::string, std::less<std::string> >, std::allocator<std::pair<std::string const, xfx::Mesh::Animation> > > const & xfx::Mesh::Animations() const [member function]\"" );
        
        }
        { //property "pos_keys"[fget=::xfx::Mesh::PosKeys]
        
            typedef ::xfx::Envelope<xfx::Vec3, float, xfx::SimpleLerpFn<xfx::Vec3> > const & ( ::xfx::Mesh::*fget )(  ) const;
            
            Mesh_exposer.add_property( 
                "pos_keys"
                , bp::make_function( 
                      fget( &::xfx::Mesh::PosKeys )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Envelope<xfx::Vec3, float, xfx::SimpleLerpFn<xfx::Vec3> > const & xfx::Mesh::PosKeys() const [member function]\"" );
        
        }
        { //property "rot_keys"[fget=::xfx::Mesh::RotKeys]
        
            typedef ::xfx::Envelope<xfx::Quaternion, float, xfx::QuaternionLerpFn> const & ( ::xfx::Mesh::*fget )(  ) const;
            
            Mesh_exposer.add_property( 
                "rot_keys"
                , bp::make_function( 
                      fget( &::xfx::Mesh::RotKeys )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Envelope<xfx::Quaternion, float, xfx::QuaternionLerpFn> const & xfx::Mesh::RotKeys() const [member function]\"" );
        
        }
        { //property "scale_keys"[fget=::xfx::Mesh::ScaleKeys]
        
            typedef ::xfx::Envelope<xfx::Vec3, float, xfx::SimpleLerpFn<xfx::Vec3> > const & ( ::xfx::Mesh::*fget )(  ) const;
            
            Mesh_exposer.add_property( 
                "scale_keys"
                , bp::make_function( 
                      fget( &::xfx::Mesh::ScaleKeys )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Envelope<xfx::Vec3, float, xfx::SimpleLerpFn<xfx::Vec3> > const & xfx::Mesh::ScaleKeys() const [member function]\"" );
        
        }
        { //property "aabb_tree"[fget=::xfx::Mesh::GetAABBTree]
        
            typedef ::xfx::AABBTree const & ( ::xfx::Mesh::*fget )(  ) const;
            
            Mesh_exposer.add_property( 
                "aabb_tree"
                , bp::make_function( 
                      fget( &::xfx::Mesh::GetAABBTree )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::AABBTree const & xfx::Mesh::GetAABBTree() const [member function]\"" );
        
        }
        { //property "root_aabb"[fget=::xfx::Mesh::RootAABB]
        
            typedef ::xfx::Primitives::AABB const & ( ::xfx::Mesh::*fget )(  ) const;
            
            Mesh_exposer.add_property( 
                "root_aabb"
                , bp::make_function( 
                      fget( &::xfx::Mesh::RootAABB )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Primitives::AABB const & xfx::Mesh::RootAABB() const [member function]\"" );
        
        }
        { //property "cache"[fget=::xfx::Mesh::Cache]
        
            typedef ::xfx::Cache<xfx::Mesh> & ( *fget )(  );
            
            Mesh_exposer.add_static_property( 
                "cache"
                , bp::make_function( 
                      fget( &::xfx::Mesh::Cache )
                    , bp::return_value_policy< bp::reference_existing_object >() )  );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Mesh const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Mesh >, boost::shared_ptr< xfx::Mesh const > >( );
    }

}

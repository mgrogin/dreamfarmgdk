// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "drawtools.pypp.hpp"

namespace bp = boost::python;

void register_DrawTools_class(){

    { //::xfx::DrawTools
        typedef bp::class_< xfx::DrawTools, boost::noncopyable > DrawTools_exposer_t;
        DrawTools_exposer_t DrawTools_exposer = DrawTools_exposer_t( "DrawTools", bp::no_init );
        bp::scope DrawTools_scope( DrawTools_exposer );
        { //::xfx::DrawTools::TriVertex
            typedef bp::class_< xfx::DrawTools::TriVertex > TriVertex_exposer_t;
            TriVertex_exposer_t TriVertex_exposer = TriVertex_exposer_t( "TriVertex", bp::init< >() );
            bp::scope TriVertex_scope( TriVertex_exposer );
            TriVertex_exposer.def( bp::init< xfx::Vec3 const &, xfx::Vec3 const &, xfx::ARGB const &, float const &, float const & >(( bp::arg("ver"), bp::arg("n"), bp::arg("c"), bp::arg("u"), bp::arg("v") )) );
            TriVertex_exposer.def_readwrite( "color", &xfx::DrawTools::TriVertex::color );
            TriVertex_exposer.def_readwrite( "norm", &xfx::DrawTools::TriVertex::norm );
            TriVertex_exposer.def_readwrite( "pos", &xfx::DrawTools::TriVertex::pos );
            TriVertex_exposer.def_readwrite( "tu", &xfx::DrawTools::TriVertex::tu );
            TriVertex_exposer.def_readwrite( "tv", &xfx::DrawTools::TriVertex::tv );
            bp::register_ptr_to_python< boost::shared_ptr< xfx::DrawTools::TriVertex const > >( );
            bp::implicitly_convertible< boost::shared_ptr< xfx::DrawTools::TriVertex >, boost::shared_ptr< xfx::DrawTools::TriVertex const > >( );
        }
        DrawTools_exposer.def( bp::init< >() );
        { //::xfx::DrawTools::FlushAll
        
            typedef void ( ::xfx::DrawTools::*flush_all_function_type )(  ) ;
            
            DrawTools_exposer.def( 
                "flush_all"
                , flush_all_function_type( &::xfx::DrawTools::FlushAll ) );
        
        }
        { //::xfx::DrawTools::FlushLines
        
            typedef void ( ::xfx::DrawTools::*flush_lines_function_type )(  ) ;
            
            DrawTools_exposer.def( 
                "flush_lines"
                , flush_lines_function_type( &::xfx::DrawTools::FlushLines ) );
        
        }
        { //::xfx::DrawTools::FlushTrisAndSprites
        
            typedef void ( ::xfx::DrawTools::*flush_tris_and_sprites_function_type )(  ) ;
            
            DrawTools_exposer.def( 
                "flush_tris_and_sprites"
                , flush_tris_and_sprites_function_type( &::xfx::DrawTools::FlushTrisAndSprites ) );
        
        }
        { //::xfx::DrawTools::Init
        
            typedef void ( ::xfx::DrawTools::*init_function_type )(  ) ;
            
            DrawTools_exposer.def( 
                "init"
                , init_function_type( &::xfx::DrawTools::Init ) );
        
        }
        { //::xfx::DrawTools::PushDraw2DSprite
        
            typedef void ( ::xfx::DrawTools::*push_draw_2d_sprite_function_type )( float const &,float const &,float const &,float const &,int const &,::xfx::ARGB const &,::boost::shared_ptr< xfx::Shader const > const &,::boost::shared_ptr< xfx::ShaderParams const > const &,float const &,float const &,float const &,float const &,float const &,float const &,bool const &,bool const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_2d_sprite"
                , push_draw_2d_sprite_function_type( &::xfx::DrawTools::PushDraw2DSprite )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("scalex"), bp::arg("scaley"), bp::arg("roll"), bp::arg("color"), bp::arg("shader"), bp::arg("shader_params")=boost::shared_ptr<const xfx::ShaderParams>(), bp::arg("u1")=0.0f, bp::arg("v1")=0.0f, bp::arg("u2")=1.0e+0f, bp::arg("v2")=1.0e+0f, bp::arg("z")=0.0f, bp::arg("rhw")=1.0e+0f, bp::arg("fixed_size")=false, bp::arg("vp")=false ) );
        
        }
        { //::xfx::DrawTools::PushDraw2DText
        
            typedef void ( ::xfx::DrawTools::*push_draw_2d_text_function_type )( ::xfx::Font const &,float const &,float const &,float const &,float const &,::xfx::WString const &,::xfx::ARGB const &,::boost::shared_ptr< xfx::ShaderParams const > const &,float const &,float const &,bool const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_2d_text"
                , push_draw_2d_text_function_type( &::xfx::DrawTools::PushDraw2DText )
                , ( bp::arg("fnt"), bp::arg("x"), bp::arg("y"), bp::arg("xscale"), bp::arg("yscale"), bp::arg("text"), bp::arg("color")=xfx::ARGB(255, 255, 255, 255), bp::arg("shader_params")=boost::shared_ptr<const xfx::ShaderParams>(), bp::arg("z")=0.0f, bp::arg("rhw")=1.0e+0f, bp::arg("vp")=false ) );
        
        }
        { //::xfx::DrawTools::PushDraw3DSprite
        
            typedef void ( ::xfx::DrawTools::*push_draw_3d_sprite_function_type )( ::xfx::Vec3 const &,float const &,int const &,::xfx::ARGB const &,::boost::shared_ptr< xfx::Shader const > const &,::boost::shared_ptr< xfx::ShaderParams const > const &,float const &,float const &,float const &,float const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_3d_sprite"
                , push_draw_3d_sprite_function_type( &::xfx::DrawTools::PushDraw3DSprite )
                , ( bp::arg("position"), bp::arg("scale"), bp::arg("roll"), bp::arg("color"), bp::arg("shader"), bp::arg("shader_params")=boost::shared_ptr<const xfx::ShaderParams>(), bp::arg("u1")=0.0f, bp::arg("v1")=0.0f, bp::arg("u2")=1.0e+0f, bp::arg("v2")=1.0e+0f ) );
        
        }
        { //::xfx::DrawTools::PushDraw3DSprite
        
            typedef void ( ::xfx::DrawTools::*push_draw_3d_sprite_function_type )( ::xfx::Vec3 const &,float const &,float const &,int const &,::xfx::ARGB const &,::boost::shared_ptr< xfx::Shader const > const &,::boost::shared_ptr< xfx::ShaderParams const > const &,float const &,float const &,float const &,float const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_3d_sprite"
                , push_draw_3d_sprite_function_type( &::xfx::DrawTools::PushDraw3DSprite )
                , ( bp::arg("position"), bp::arg("scalex"), bp::arg("scaley"), bp::arg("roll"), bp::arg("color"), bp::arg("shader"), bp::arg("shader_params")=boost::shared_ptr<const xfx::ShaderParams>(), bp::arg("u1")=0.0f, bp::arg("v1")=0.0f, bp::arg("u2")=1.0e+0f, bp::arg("v2")=1.0e+0f ) );
        
        }
        { //::xfx::DrawTools::PushDraw3DText
        
            typedef void ( ::xfx::DrawTools::*push_draw_3d_text_function_type )( ::xfx::Font const &,::xfx::Vec3 const &,float const &,float const &,::xfx::WString const &,::xfx::ARGB const &,::boost::shared_ptr< xfx::ShaderParams const > const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_3d_text"
                , push_draw_3d_text_function_type( &::xfx::DrawTools::PushDraw3DText )
                , ( bp::arg("fnt"), bp::arg("pos"), bp::arg("xscale"), bp::arg("yscale"), bp::arg("text"), bp::arg("color")=xfx::ARGB(255, 255, 255, 255), bp::arg("shader_params")=boost::shared_ptr<const xfx::ShaderParams>() ) );
        
        }
        { //::xfx::DrawTools::PushDrawAxises
        
            typedef void ( ::xfx::DrawTools::*push_draw_axises_function_type )( ::xfx::Mat4 const &,float const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_axises"
                , push_draw_axises_function_type( &::xfx::DrawTools::PushDrawAxises )
                , ( bp::arg("m"), bp::arg("len") ) );
        
        }
        { //::xfx::DrawTools::PushDrawBox
        
            typedef void ( ::xfx::DrawTools::*push_draw_box_function_type )( ::xfx::Primitives::AABB const &,::xfx::ARGB const &,::xfx::Mat4 const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_box"
                , push_draw_box_function_type( &::xfx::DrawTools::PushDrawBox )
                , ( bp::arg("box"), bp::arg("color"), bp::arg("matr")=xfx::Mat4(1.0e+0f) ) );
        
        }
        { //::xfx::DrawTools::PushDrawBox
        
            typedef void ( ::xfx::DrawTools::*push_draw_box_function_type )( ::xfx::Primitives::OBB const &,::xfx::ARGB const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_box"
                , push_draw_box_function_type( &::xfx::DrawTools::PushDrawBox )
                , ( bp::arg("box"), bp::arg("color") ) );
        
        }
        { //::xfx::DrawTools::PushDrawLine
        
            typedef void ( ::xfx::DrawTools::*push_draw_line_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const &,::xfx::ARGB const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_line"
                , push_draw_line_function_type( &::xfx::DrawTools::PushDrawLine )
                , ( bp::arg("v0"), bp::arg("v1"), bp::arg("color") ) );
        
        }
        { //::xfx::DrawTools::PushDrawLine
        
            typedef void ( ::xfx::DrawTools::*push_draw_line_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const &,::xfx::ARGB const &,::xfx::ARGB const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_line"
                , push_draw_line_function_type( &::xfx::DrawTools::PushDrawLine )
                , ( bp::arg("v0"), bp::arg("v1"), bp::arg("color0"), bp::arg("color1") ) );
        
        }
        { //::xfx::DrawTools::PushDrawSphere
        
            typedef void ( ::xfx::DrawTools::*push_draw_sphere_function_type )( ::xfx::Vec3 const &,float const &,::xfx::ARGB const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_sphere"
                , push_draw_sphere_function_type( &::xfx::DrawTools::PushDrawSphere )
                , ( bp::arg("origin"), bp::arg("radius"), bp::arg("color")=xfx::ARGB(255, 255, 255, 255) ) );
        
        }
        { //::xfx::DrawTools::PushDrawTris
        
            typedef void ( ::xfx::DrawTools::*push_draw_tris_function_type )( int,::xfx::DrawTools::TriVertex const *,::boost::shared_ptr< xfx::Shader const > const &,::boost::shared_ptr< xfx::ShaderParams const > const & ) ;
            
            DrawTools_exposer.def( 
                "push_draw_tris"
                , push_draw_tris_function_type( &::xfx::DrawTools::PushDrawTris )
                , ( bp::arg("numtris"), bp::arg("vertices"), bp::arg("shader"), bp::arg("shader_params")=boost::shared_ptr<const xfx::ShaderParams>() ) );
        
        }
        { //::xfx::DrawTools::Shutdown
        
            typedef void ( ::xfx::DrawTools::*shutdown_function_type )(  ) ;
            
            DrawTools_exposer.def( 
                "shutdown"
                , shutdown_function_type( &::xfx::DrawTools::Shutdown ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::DrawTools const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::DrawTools >, boost::shared_ptr< xfx::DrawTools const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "application.pypp.hpp"

namespace bp = boost::python;

struct Application_wrapper : xfx::Application, bp::wrapper< xfx::Application > {

    Application_wrapper(xfx::Application const & arg )
    : xfx::Application( arg )
      , bp::wrapper< xfx::Application >(){
        // copy constructor
        
    }

    Application_wrapper( )
    : xfx::Application( )
      , bp::wrapper< xfx::Application >(){
        // null constructor
    
    }

    virtual ::HRESULT InitEngine( ::xfx::String const & cmdline, ::xfx::WString const & wndclass, ::xfx::WString const & caption ) {
        if( bp::override func_init_engine = this->get_override( "init_engine" ) )
            return func_init_engine( cmdline, wndclass, caption );
        else
            return this->xfx::Application::InitEngine( cmdline, wndclass, caption );
    }
    
    
    ::HRESULT default_init_engine( ::xfx::String const & cmdline, ::xfx::WString const & wndclass, ::xfx::WString const & caption ) {
        return xfx::Application::InitEngine( cmdline, wndclass, caption );
    }

    virtual void MainLoop(  ) {
        if( bp::override func_main_loop = this->get_override( "main_loop" ) )
            func_main_loop(  );
        else
            this->xfx::Application::MainLoop(  );
    }
    
    
    void default_main_loop(  ) {
        xfx::Application::MainLoop( );
    }

    virtual void Render(  ) const  {
        if( bp::override func_render = this->get_override( "render" ) )
            func_render(  );
        else
            this->xfx::Application::Render(  );
    }
    
    
    void default_render(  ) const  {
        xfx::Application::Render( );
    }

    virtual void Shutdown(  ) {
        if( bp::override func_shutdown = this->get_override( "shutdown" ) )
            func_shutdown(  );
        else
            this->xfx::Application::Shutdown(  );
    }
    
    
    void default_shutdown(  ) {
        xfx::Application::Shutdown( );
    }

    virtual void Update(  ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update(  );
        else
            this->xfx::Application::Update(  );
    }
    
    
    void default_update(  ) {
        xfx::Application::Update( );
    }

};

void register_Application_class(){

    { //::xfx::Application
        typedef bp::class_< Application_wrapper > Application_exposer_t;
        Application_exposer_t Application_exposer = Application_exposer_t( "Application", bp::init< >() );
        bp::scope Application_scope( Application_exposer );
        { //::xfx::Application::InitEngine
        
            typedef ::HRESULT ( ::xfx::Application::*init_engine_function_type )( ::xfx::String const &,::xfx::WString const &,::xfx::WString const & ) ;
            typedef ::HRESULT ( Application_wrapper::*default_init_engine_function_type )( ::xfx::String const &,::xfx::WString const &,::xfx::WString const & ) ;
            
            Application_exposer.def( 
                "init_engine"
                , init_engine_function_type(&::xfx::Application::InitEngine)
                , default_init_engine_function_type(&Application_wrapper::default_init_engine)
                , ( bp::arg("cmdline"), bp::arg("wndclass"), bp::arg("caption") ) );
        
        }
        { //::xfx::Application::MainLoop
        
            typedef void ( ::xfx::Application::*main_loop_function_type )(  ) ;
            typedef void ( Application_wrapper::*default_main_loop_function_type )(  ) ;
            
            Application_exposer.def( 
                "main_loop"
                , main_loop_function_type(&::xfx::Application::MainLoop)
                , default_main_loop_function_type(&Application_wrapper::default_main_loop) );
        
        }
        { //::xfx::Application::Render
        
            typedef void ( ::xfx::Application::*render_function_type )(  ) const;
            typedef void ( Application_wrapper::*default_render_function_type )(  ) const;
            
            Application_exposer.def( 
                "render"
                , render_function_type(&::xfx::Application::Render)
                , default_render_function_type(&Application_wrapper::default_render) );
        
        }
        { //::xfx::Application::Shutdown
        
            typedef void ( ::xfx::Application::*shutdown_function_type )(  ) ;
            typedef void ( Application_wrapper::*default_shutdown_function_type )(  ) ;
            
            Application_exposer.def( 
                "shutdown"
                , shutdown_function_type(&::xfx::Application::Shutdown)
                , default_shutdown_function_type(&Application_wrapper::default_shutdown) );
        
        }
        { //::xfx::Application::Update
        
            typedef void ( ::xfx::Application::*update_function_type )(  ) ;
            typedef void ( Application_wrapper::*default_update_function_type )(  ) ;
            
            Application_exposer.def( 
                "update"
                , update_function_type(&::xfx::Application::Update)
                , default_update_function_type(&Application_wrapper::default_update) );
        
        }
        { //property "timer"[fget=::xfx::Application::GetTimer]
        
            typedef ::xfx::Timer & ( ::xfx::Application::*fget )(  ) ;
            
            Application_exposer.add_property( 
                "timer"
                , bp::make_function( 
                      fget( &::xfx::Application::GetTimer )
                    , bp::return_internal_reference< >() )  );
        
        }
        { //property "h_wnd"[fget=::xfx::Application::HWnd]
        
            typedef void * ( ::xfx::Application::*fget )(  ) const;
            
            Application_exposer.add_property( 
                "h_wnd"
                , bp::make_function( 
                      fget( &::xfx::Application::HWnd )
                    , bp::return_value_policy< bp::return_opaque_pointer >() ) 
                , "get property, built on top of \"void * xfx::Application::HWnd() const [member function]\"" );
        
        }
        { //property "h_instance"[fget=::xfx::Application::HInstance]
        
            typedef ::HINSTANCE const & ( ::xfx::Application::*fget )(  ) const;
            
            Application_exposer.add_property( 
                "h_instance"
                , bp::make_function( 
                      fget( &::xfx::Application::HInstance )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"HINSTANCE const & xfx::Application::HInstance() const [member function]\"" );
        
        }
        { //property "command_line"[fget=::xfx::Application::CommandLine]
        
            typedef ::xfx::String const & ( ::xfx::Application::*fget )(  ) const;
            
            Application_exposer.add_property( 
                "command_line"
                , bp::make_function( 
                      fget( &::xfx::Application::CommandLine )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::String const & xfx::Application::CommandLine() const [member function]\"" );
        
        }
        { //property "wnd_class"[fget=::xfx::Application::WndClass]
        
            typedef ::xfx::WString const & ( ::xfx::Application::*fget )(  ) const;
            
            Application_exposer.add_property( 
                "wnd_class"
                , bp::make_function( 
                      fget( &::xfx::Application::WndClass )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::WString const & xfx::Application::WndClass() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Application const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Application >, boost::shared_ptr< xfx::Application const > >( );
    }

}

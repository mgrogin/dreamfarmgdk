// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "script_less__std_scope_string__greater_.pypp.hpp"

namespace bp = boost::python;

void register_Script_less__std_scope_string__greater__class(){

    { //::xfx::Script< std::string >
        typedef bp::class_< xfx::Script< std::string > > Script_less__std_scope_string__greater__exposer_t;
        Script_less__std_scope_string__greater__exposer_t Script_less__std_scope_string__greater__exposer = Script_less__std_scope_string__greater__exposer_t( "Script_less__std_scope_string__greater_", bp::init< >() );
        bp::scope Script_less__std_scope_string__greater__scope( Script_less__std_scope_string__greater__exposer );
        { //::xfx::Script< std::string >::Parse
        
            typedef xfx::Script< std::string > exported_class_t;
            typedef ::HRESULT ( exported_class_t::*parse_function_type )( ::std::string const & ) ;
            
            Script_less__std_scope_string__greater__exposer.def( 
                "parse"
                , parse_function_type( &::xfx::Script< std::string >::Parse )
                , ( bp::arg("str") ) );
        
        }
        { //property "delimiters"[fget=::xfx::Script<std::string>::Delimiters, fset=::xfx::Script<std::string>::SetDelimiters]
        
            typedef xfx::Script<std::string> exported_class_t;
            
            typedef ::std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & ( exported_class_t::*fget )(  ) const;
            typedef void ( exported_class_t::*fset )( ::std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & ) ;
            
            Script_less__std_scope_string__greater__exposer.add_property( 
                "delimiters"
                , bp::make_function( 
                      fget( &::xfx::Script<std::string>::Delimiters )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Script<std::string>::SetDelimiters )
                , "get\\set property, built on top of \"std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & xfx::Script<std::string>::Delimiters() const [member function]\" and \"void xfx::Script<std::string>::SetDelimiters(std::basic_string<char,std::char_traits<char>,std::allocator<char> > const & delimiters) [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Script<std::string> const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Script<std::string> >, boost::shared_ptr< xfx::Script<std::string> const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "meshstate.pypp.hpp"

namespace bp = boost::python;

void register_MeshState_class(){

    { //::xfx::MeshState
        typedef bp::class_< xfx::MeshState, bp::bases< xfx::Transformable3D >, boost::noncopyable > MeshState_exposer_t;
        MeshState_exposer_t MeshState_exposer = MeshState_exposer_t( "MeshState", bp::no_init );
        bp::scope MeshState_scope( MeshState_exposer );
        MeshState_exposer.def( bp::init< >() );
        { //::xfx::MeshState::GetShaderParams
        
            typedef ::xfx::ShaderParams & ( ::xfx::MeshState::*get_shader_params_function_type )(  ) ;
            
            MeshState_exposer.def( 
                "get_shader_params"
                , get_shader_params_function_type( &::xfx::MeshState::GetShaderParams )
                , bp::return_internal_reference< >() );
        
        }
        { //::xfx::MeshState::GetShaderParams
        
            typedef ::xfx::ShaderParams const & ( ::xfx::MeshState::*get_shader_params_function_type )(  ) const;
            
            MeshState_exposer.def( 
                "get_shader_params"
                , get_shader_params_function_type( &::xfx::MeshState::GetShaderParams )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::xfx::MeshState::PlayAnimation
        
            typedef void ( ::xfx::MeshState::*play_animation_function_type )( ::xfx::String const & ) ;
            
            MeshState_exposer.def( 
                "play_animation"
                , play_animation_function_type( &::xfx::MeshState::PlayAnimation )
                , ( bp::arg("str") ) );
        
        }
        { //::xfx::MeshState::Render
        
            typedef void ( ::xfx::MeshState::*render_function_type )(  ) const;
            
            MeshState_exposer.def( 
                "render"
                , render_function_type( &::xfx::MeshState::Render ) );
        
        }
        { //::xfx::MeshState::Update
        
            typedef void ( ::xfx::MeshState::*update_function_type )( ::DWORD ) ;
            
            MeshState_exposer.def( 
                "update"
                , update_function_type( &::xfx::MeshState::Update )
                , ( bp::arg("mspf") ) );
        
        }
        { //property "mesh_ptr"[fget=::xfx::MeshState::MeshPtr, fset=::xfx::MeshState::SetMeshPtr]
        
            typedef ::boost::shared_ptr<xfx::Mesh const> const & ( ::xfx::MeshState::*fget )(  ) const;
            typedef void ( ::xfx::MeshState::*fset )( ::boost::shared_ptr<xfx::Mesh const> const & ) ;
            
            MeshState_exposer.add_property( 
                "mesh_ptr"
                , bp::make_function( 
                      fget( &::xfx::MeshState::MeshPtr )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::MeshState::SetMeshPtr )
                , "get\\set property, built on top of \"boost::shared_ptr<xfx::Mesh const> const & xfx::MeshState::MeshPtr() const [member function]\" and \"void xfx::MeshState::SetMeshPtr(boost::shared_ptr<xfx::Mesh const> const & mdl) [member function]\"" );
        
        }
        { //property "shader_ptr"[fget=::xfx::MeshState::ShaderPtr, fset=::xfx::MeshState::SetShaderPtr]
        
            typedef ::boost::shared_ptr<xfx::Shader const> const & ( ::xfx::MeshState::*fget )(  ) const;
            typedef void ( ::xfx::MeshState::*fset )( ::boost::shared_ptr<xfx::Shader const> const & ) ;
            
            MeshState_exposer.add_property( 
                "shader_ptr"
                , bp::make_function( 
                      fget( &::xfx::MeshState::ShaderPtr )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::MeshState::SetShaderPtr )
                , "get\\set property, built on top of \"boost::shared_ptr<xfx::Shader const> const & xfx::MeshState::ShaderPtr() const [member function]\" and \"void xfx::MeshState::SetShaderPtr(boost::shared_ptr<xfx::Shader const> const & shd) [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::MeshState const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::MeshState >, boost::shared_ptr< xfx::MeshState const > >( );
    }

}

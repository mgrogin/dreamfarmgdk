// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "ray.pypp.hpp"

namespace bp = boost::python;

void register_Ray_class(){

    { //::xfx::Ray
        typedef bp::class_< xfx::Ray > Ray_exposer_t;
        Ray_exposer_t Ray_exposer = Ray_exposer_t( "Ray", bp::init< >() );
        bp::scope Ray_scope( Ray_exposer );
        Ray_exposer.def( bp::init< xfx::Vec3 const &, xfx::Vec3 const & >(( bp::arg("origin"), bp::arg("direction") )) );
        { //::xfx::Ray::Point
        
            typedef ::xfx::Vec3 ( ::xfx::Ray::*point_function_type )( float ) const;
            
            Ray_exposer.def( 
                "point"
                , point_function_type( &::xfx::Ray::Point )
                , ( bp::arg("t") ) );
        
        }
        { //::xfx::Ray::Transform
        
            typedef void ( ::xfx::Ray::*transform_function_type )( ::xfx::Mat4 const & ) ;
            
            Ray_exposer.def( 
                "transform"
                , transform_function_type( &::xfx::Ray::Transform )
                , ( bp::arg("m") ) );
        
        }
        { //property "origin"[fget=::xfx::Ray::Origin, fset=::xfx::Ray::SetOrigin]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Ray::*fget )(  ) const;
            typedef void ( ::xfx::Ray::*fset )( ::xfx::Vec3 const & ) ;
            
            Ray_exposer.add_property( 
                "origin"
                , bp::make_function( 
                      fget( &::xfx::Ray::Origin )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Ray::SetOrigin )
                , "get\\set property, built on top of \"xfx::Vec3 const & xfx::Ray::Origin() const [member function]\" and \"void xfx::Ray::SetOrigin(xfx::Vec3 const & origin) [member function]\"" );
        
        }
        { //property "direction"[fget=::xfx::Ray::Direction, fset=::xfx::Ray::SetDirection]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Ray::*fget )(  ) const;
            typedef void ( ::xfx::Ray::*fset )( ::xfx::Vec3 const & ) ;
            
            Ray_exposer.add_property( 
                "direction"
                , bp::make_function( 
                      fget( &::xfx::Ray::Direction )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Ray::SetDirection )
                , "get\\set property, built on top of \"xfx::Vec3 const & xfx::Ray::Direction() const [member function]\" and \"void xfx::Ray::SetDirection(xfx::Vec3 const & dir) [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Ray const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Ray >, boost::shared_ptr< xfx::Ray const > >( );
    }

}

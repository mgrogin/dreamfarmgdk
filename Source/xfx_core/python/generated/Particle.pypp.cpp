// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "particle.pypp.hpp"

namespace bp = boost::python;

void register_Particle_class(){

    { //::xfx::Particle
        typedef bp::class_< xfx::Particle > Particle_exposer_t;
        Particle_exposer_t Particle_exposer = Particle_exposer_t( "Particle" );
        bp::scope Particle_scope( Particle_exposer );
        Particle_exposer.def_readwrite( "acceleration", &xfx::Particle::acceleration );
        Particle_exposer.def_readwrite( "angle", &xfx::Particle::angle );
        Particle_exposer.def_readwrite( "color", &xfx::Particle::color );
        Particle_exposer.def_readwrite( "lifetime", &xfx::Particle::lifetime );
        Particle_exposer.def_readwrite( "localtime", &xfx::Particle::localtime );
        Particle_exposer.def_readwrite( "motionrand", &xfx::Particle::motionrand );
        Particle_exposer.def_readwrite( "position", &xfx::Particle::position );
        Particle_exposer.def_readwrite( "size", &xfx::Particle::size );
        Particle_exposer.def_readwrite( "spawn_count", &xfx::Particle::spawn_count );
        Particle_exposer.def_readwrite( "spin", &xfx::Particle::spin );
        Particle_exposer.def_readwrite( "start_size", &xfx::Particle::start_size );
        Particle_exposer.def_readwrite( "velocity", &xfx::Particle::velocity );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Particle const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Particle >, boost::shared_ptr< xfx::Particle const > >( );
    }

}

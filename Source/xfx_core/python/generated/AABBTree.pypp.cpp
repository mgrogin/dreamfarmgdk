// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "aabbtree.pypp.hpp"

namespace bp = boost::python;

static boost::python::tuple TestIntersection_fe8c826c9259616a6b044db3c0b88b4e( ::xfx::AABBTree const & inst, ::xfx::Ray const & ray, float const & max_t=3.4028234663852885981170418348451692544e+38f ){
    float t2;
    xfx::Vec3 normal2;
    bool result = inst.TestIntersection(t2, normal2, ray, max_t);
    return bp::make_tuple( result, t2, normal2 );
}

void register_AABBTree_class(){

    { //::xfx::AABBTree
        typedef bp::class_< xfx::AABBTree, boost::noncopyable > AABBTree_exposer_t;
        AABBTree_exposer_t AABBTree_exposer = AABBTree_exposer_t( "AABBTree", bp::no_init );
        bp::scope AABBTree_scope( AABBTree_exposer );
        AABBTree_exposer.def( bp::init< >() );
        { //::xfx::AABBTree::DebugDraw
        
            typedef void ( ::xfx::AABBTree::*debug_draw_function_type )( ::xfx::Mat4 const & ) const;
            
            AABBTree_exposer.def( 
                "debug_draw"
                , debug_draw_function_type( &::xfx::AABBTree::DebugDraw )
                , ( bp::arg("matr") ) );
        
        }
        { //::xfx::AABBTree::TestIntersection
        
            typedef bool ( ::xfx::AABBTree::*test_intersection_function_type )( ::xfx::AABBTree const &,::xfx::Mat4 const &,unsigned int ) const;
            
            AABBTree_exposer.def( 
                "test_intersection"
                , test_intersection_function_type( &::xfx::AABBTree::TestIntersection )
                , ( bp::arg("tree"), bp::arg("matr"), bp::arg("deep")=(unsigned int)(-0x000000001) ) );
        
        }
        { //::xfx::AABBTree::TestIntersection
        
            typedef boost::python::tuple ( *test_intersection_ray_function_type )( ::xfx::AABBTree const &,::xfx::Ray const &,float const & );
            
            AABBTree_exposer.def( 
                "test_intersection_ray"
                , test_intersection_ray_function_type( &TestIntersection_fe8c826c9259616a6b044db3c0b88b4e )
                , ( bp::arg("inst"), bp::arg("ray"), bp::arg("max_t")=3.4028234663852885981170418348451692544e+38f ) );
        
        }
        { //property "root_aabb"[fget=::xfx::AABBTree::RootAABB]
        
            typedef ::xfx::Primitives::AABB const & ( ::xfx::AABBTree::*fget )(  ) const;
            
            AABBTree_exposer.add_property( 
                "root_aabb"
                , bp::make_function( 
                      fget( &::xfx::AABBTree::RootAABB )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Primitives::AABB const & xfx::AABBTree::RootAABB() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::AABBTree const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::AABBTree >, boost::shared_ptr< xfx::AABBTree const > >( );
    }

}

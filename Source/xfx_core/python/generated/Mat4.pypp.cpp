// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "mat4.pypp.hpp"

namespace bp = boost::python;

void register_Mat4_class(){

    { //::xfx::Mat4
        typedef bp::class_< xfx::Mat4 > Mat4_exposer_t;
        Mat4_exposer_t Mat4_exposer = Mat4_exposer_t( "Mat4", bp::init< >() );
        bp::scope Mat4_scope( Mat4_exposer );
        Mat4_exposer.def( bp::init< float >(( bp::arg("v") )) );
        bp::implicitly_convertible< float, xfx::Mat4 >();
        Mat4_exposer.def( bp::init< float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float >(( bp::arg("_11"), bp::arg("_12"), bp::arg("_13"), bp::arg("_14"), bp::arg("_21"), bp::arg("_22"), bp::arg("_23"), bp::arg("_24"), bp::arg("_31"), bp::arg("_32"), bp::arg("_33"), bp::arg("_34"), bp::arg("_41"), bp::arg("_42"), bp::arg("_43"), bp::arg("_44") )) );
        Mat4_exposer.def( bp::init< xfx::Vec3 const &, xfx::Euler const &, xfx::Vec3 const & >(( bp::arg("pos"), bp::arg("orientation"), bp::arg("scale") )) );
        { //::xfx::Mat4::Inverse
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*inverse_function_type )(  ) ;
            
            Mat4_exposer.def( 
                "inverse"
                , inverse_function_type( &::xfx::Mat4::Inverse )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::InverseAffine
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*inverse_affine_function_type )(  ) ;
            
            Mat4_exposer.def( 
                "inverse_affine"
                , inverse_affine_function_type( &::xfx::Mat4::InverseAffine )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::LookAtLH
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*look_at_lh_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const &,::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "look_at_lh"
                , look_at_lh_function_type( &::xfx::Mat4::LookAtLH )
                , ( bp::arg("cam"), bp::arg("dir"), bp::arg("vy") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::LookAtRH
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*look_at_rh_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const &,::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "look_at_rh"
                , look_at_rh_function_type( &::xfx::Mat4::LookAtRH )
                , ( bp::arg("cam"), bp::arg("dir"), bp::arg("vy") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeIdentity
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_identity_function_type )(  ) ;
            
            Mat4_exposer.def( 
                "make_identity"
                , make_identity_function_type( &::xfx::Mat4::MakeIdentity )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeRotationAxis
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_rotation_axis_function_type )( ::xfx::Vec3 const &,float,float ) ;
            
            Mat4_exposer.def( 
                "make_rotation_axis"
                , make_rotation_axis_function_type( &::xfx::Mat4::MakeRotationAxis )
                , ( bp::arg("axis"), bp::arg("cosine"), bp::arg("sine") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeRotationAxisByAngle
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_rotation_axis_by_angle_function_type )( ::xfx::Vec3 const &,int ) ;
            
            Mat4_exposer.def( 
                "make_rotation_axis_by_angle"
                , make_rotation_axis_by_angle_function_type( &::xfx::Mat4::MakeRotationAxisByAngle )
                , ( bp::arg("axis"), bp::arg("Angle") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeRotationX
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_rotation_x_function_type )( int ) ;
            
            Mat4_exposer.def( 
                "make_rotation_x"
                , make_rotation_x_function_type( &::xfx::Mat4::MakeRotationX )
                , ( bp::arg("angle") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeRotationY
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_rotation_y_function_type )( int ) ;
            
            Mat4_exposer.def( 
                "make_rotation_y"
                , make_rotation_y_function_type( &::xfx::Mat4::MakeRotationY )
                , ( bp::arg("angle") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeRotationZ
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_rotation_z_function_type )( int ) ;
            
            Mat4_exposer.def( 
                "make_rotation_z"
                , make_rotation_z_function_type( &::xfx::Mat4::MakeRotationZ )
                , ( bp::arg("angle") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::MakeScale
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*make_scale_function_type )( ::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "make_scale"
                , make_scale_function_type( &::xfx::Mat4::MakeScale )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::PerspectiveFovLH
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*perspective_fov_lh_function_type )( float,float,float,float ) ;
            
            Mat4_exposer.def( 
                "perspective_fov_lh"
                , perspective_fov_lh_function_type( &::xfx::Mat4::PerspectiveFovLH )
                , ( bp::arg("fov"), bp::arg("aspect"), bp::arg("znear"), bp::arg("zfar") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::PerspectiveFovRH
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*perspective_fov_rh_function_type )( float,float,float,float ) ;
            
            Mat4_exposer.def( 
                "perspective_fov_rh"
                , perspective_fov_rh_function_type( &::xfx::Mat4::PerspectiveFovRH )
                , ( bp::arg("fov"), bp::arg("aspect"), bp::arg("znear"), bp::arg("zfar") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::Reset
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*reset_function_type )( ::xfx::Vec3 const &,::xfx::Euler const &,::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "reset"
                , reset_function_type( &::xfx::Mat4::Reset )
                , ( bp::arg("pos"), bp::arg("orientation"), bp::arg("scale") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::SetScale
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*set_scale_function_type )( ::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "set_scale"
                , set_scale_function_type( &::xfx::Mat4::SetScale )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::SetTranslation
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*set_translation_function_type )( ::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "set_translation"
                , set_translation_function_type( &::xfx::Mat4::SetTranslation )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::TransformCoord
        
            typedef ::xfx::Vec3 ( ::xfx::Mat4::*transform_coord_function_type )( ::xfx::Vec3 const & ) const;
            
            Mat4_exposer.def( 
                "transform_coord"
                , transform_coord_function_type( &::xfx::Mat4::TransformCoord )
                , ( bp::arg("v") ) );
        
        }
        { //::xfx::Mat4::TransformNormal
        
            typedef ::xfx::Vec3 ( ::xfx::Mat4::*transform_normal_function_type )( ::xfx::Vec3 const & ) const;
            
            Mat4_exposer.def( 
                "transform_normal"
                , transform_normal_function_type( &::xfx::Mat4::TransformNormal )
                , ( bp::arg("v") ) );
        
        }
        { //::xfx::Mat4::Translate
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*translate_function_type )( ::xfx::Vec3 const & ) ;
            
            Mat4_exposer.def( 
                "translate"
                , translate_function_type( &::xfx::Mat4::Translate )
                , ( bp::arg("l") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat4::Transpose
        
            typedef ::xfx::Mat4 & ( ::xfx::Mat4::*transpose_function_type )(  ) ;
            
            Mat4_exposer.def( 
                "transpose"
                , transpose_function_type( &::xfx::Mat4::Transpose )
                , bp::return_self< >() );
        
        }
        Mat4_exposer.def( bp::self *= bp::self );
        { //property "identity"[fget=::xfx::Mat4::IsIdentity]
        
            typedef bool ( ::xfx::Mat4::*fget )(  ) const;
            
            Mat4_exposer.add_property( 
                "identity"
                , fget( &::xfx::Mat4::IsIdentity )
                , "get property, built on top of \"bool xfx::Mat4::IsIdentity() const [member function]\"" );
        
        }
        { //property "transposed"[fget=::xfx::Mat4::GetTransposed]
        
            typedef ::xfx::Mat4 ( ::xfx::Mat4::*fget )(  ) const;
            
            Mat4_exposer.add_property( 
                "transposed"
                , fget( &::xfx::Mat4::GetTransposed )
                , "get property, built on top of \"xfx::Mat4 xfx::Mat4::GetTransposed() const [member function]\"" );
        
        }
        { //property "inversed"[fget=::xfx::Mat4::GetInversed]
        
            typedef ::xfx::Mat4 ( ::xfx::Mat4::*fget )(  ) const;
            
            Mat4_exposer.add_property( 
                "inversed"
                , fget( &::xfx::Mat4::GetInversed )
                , "get property, built on top of \"xfx::Mat4 xfx::Mat4::GetInversed() const [member function]\"" );
        
        }
        { //property "inversed_affine"[fget=::xfx::Mat4::GetInversedAffine]
        
            typedef ::xfx::Mat4 ( ::xfx::Mat4::*fget )(  ) const;
            
            Mat4_exposer.add_property( 
                "inversed_affine"
                , fget( &::xfx::Mat4::GetInversedAffine )
                , "get property, built on top of \"xfx::Mat4 xfx::Mat4::GetInversedAffine() const [member function]\"" );
        
        }
        { //property "translation"[fget=::xfx::Mat4::GetTranslation]
        
            typedef ::xfx::Vec3 ( ::xfx::Mat4::*fget )(  ) const;
            
            Mat4_exposer.add_property( 
                "translation"
                , fget( &::xfx::Mat4::GetTranslation )
                , "get property, built on top of \"xfx::Vec3 xfx::Mat4::GetTranslation() const [member function]\"" );
        
        }
        { //property "scale"[fget=::xfx::Mat4::GetScale]
        
            typedef ::xfx::Vec3 ( ::xfx::Mat4::*fget )(  ) const;
            
            Mat4_exposer.add_property( 
                "scale"
                , fget( &::xfx::Mat4::GetScale )
                , "get property, built on top of \"xfx::Vec3 xfx::Mat4::GetScale() const [member function]\"" );
        
        }
        Mat4_exposer.def( bp::self * bp::self );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Mat4 const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Mat4 >, boost::shared_ptr< xfx::Mat4 const > >( );
    }

}

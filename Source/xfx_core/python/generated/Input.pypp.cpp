// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "input.pypp.hpp"

namespace bp = boost::python;

void register_Input_class(){

    { //::xfx::Input
        typedef bp::class_< xfx::Input, bp::bases< xfx::Singleton< xfx::Input > >, boost::noncopyable > Input_exposer_t;
        Input_exposer_t Input_exposer = Input_exposer_t( "Input", bp::no_init );
        bp::scope Input_scope( Input_exposer );
        bp::enum_< xfx::Input::KeysType>("KeysType")
            .value("MOUSE_LBUTTON", xfx::Input::MOUSE_LBUTTON)
            .value("MOUSE_RBUTTON", xfx::Input::MOUSE_RBUTTON)
            .value("MOUSE_MBUTTON", xfx::Input::MOUSE_MBUTTON)
            .value("MOUSE_4BUTTON", xfx::Input::MOUSE_4BUTTON)
            .value("MOUSE_MOVELEFT", xfx::Input::MOUSE_MOVELEFT)
            .value("MOUSE_MOVERIGHT", xfx::Input::MOUSE_MOVERIGHT)
            .value("MOUSE_MOVEDOWN", xfx::Input::MOUSE_MOVEDOWN)
            .value("MOUSE_MOVEUP", xfx::Input::MOUSE_MOVEUP)
            .value("MOUSE_WHEELUP", xfx::Input::MOUSE_WHEELUP)
            .value("MOUSE_WHEELDOWN", xfx::Input::MOUSE_WHEELDOWN)
            .value("MAX_KEYS", xfx::Input::MAX_KEYS)
            .export_values()
            ;
        bp::enum_< xfx::Input::STATES>("STATES")
            .value("FIRST_PUSHED", xfx::Input::FIRST_PUSHED)
            .value("PUSHED", xfx::Input::PUSHED)
            .value("POPED", xfx::Input::POPED)
            .value("MAX_STATES", xfx::Input::MAX_STATES)
            .export_values()
            ;
        { //::xfx::Input::Cmd_bind
        
            typedef void ( ::xfx::Input::*cmd_bind_function_type )( bool,::xfx::String const & ) ;
            
            Input_exposer.def( 
                "cmd_bind"
                , cmd_bind_function_type( &::xfx::Input::Cmd_bind )
                , ( bp::arg("in_console"), bp::arg("str") ) );
        
        }
        { //::xfx::Input::Command
        
            typedef void ( ::xfx::Input::*command_function_type )( unsigned int,::xfx::Input::STATES,::xfx::String const & ) ;
            
            Input_exposer.def( 
                "command"
                , command_function_type( &::xfx::Input::Command )
                , ( bp::arg("key"), bp::arg("state"), bp::arg("cmd") ) );
        
        }
        { //::xfx::Input::Command
        
            typedef ::xfx::String const & ( ::xfx::Input::*command_function_type )( unsigned int,::xfx::Input::STATES ) const;
            
            Input_exposer.def( 
                "command"
                , command_function_type( &::xfx::Input::Command )
                , ( bp::arg("key"), bp::arg("state") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::xfx::Input::GetKeyForCommand
        
            typedef unsigned int ( ::xfx::Input::*get_key_for_command_function_type )( ::xfx::String const & ) const;
            
            Input_exposer.def( 
                "get_key_for_command"
                , get_key_for_command_function_type( &::xfx::Input::GetKeyForCommand )
                , ( bp::arg("command") ) );
        
        }
        { //::xfx::Input::Init
        
            typedef ::HRESULT ( ::xfx::Input::*init_function_type )(  ) ;
            
            Input_exposer.def( 
                "init"
                , init_function_type( &::xfx::Input::Init ) );
        
        }
        { //::xfx::Input::KeyCodeByName
        
            typedef unsigned int ( ::xfx::Input::*key_code_by_name_function_type )( char const * ) const;
            
            Input_exposer.def( 
                "key_code_by_name"
                , key_code_by_name_function_type( &::xfx::Input::KeyCodeByName )
                , ( bp::arg("name") ) );
        
        }
        { //::xfx::Input::KeyName
        
            typedef char const * ( ::xfx::Input::*key_name_function_type )( unsigned int ) const;
            
            Input_exposer.def( 
                "key_name"
                , key_name_function_type( &::xfx::Input::KeyName )
                , ( bp::arg("key") ) );
        
        }
        { //::xfx::Input::RetrieveData
        
            typedef void ( ::xfx::Input::*retrieve_data_function_type )(  ) ;
            
            Input_exposer.def( 
                "retrieve_data"
                , retrieve_data_function_type( &::xfx::Input::RetrieveData ) );
        
        }
        { //::xfx::Input::SetMouseMode
        
            typedef void ( ::xfx::Input::*set_mouse_mode_function_type )( bool const & ) ;
            
            Input_exposer.def( 
                "set_mouse_mode"
                , set_mouse_mode_function_type( &::xfx::Input::SetMouseMode )
                , ( bp::arg("isexclusive") ) );
        
        }
        { //::xfx::Input::Shutdown
        
            typedef ::HRESULT ( ::xfx::Input::*shutdown_function_type )(  ) ;
            
            Input_exposer.def( 
                "shutdown"
                , shutdown_function_type( &::xfx::Input::Shutdown ) );
        
        }
        { //::xfx::Input::TestKey
        
            typedef bool ( ::xfx::Input::*test_key_function_type )( unsigned int ) const;
            
            Input_exposer.def( 
                "test_key"
                , test_key_function_type( &::xfx::Input::TestKey )
                , ( bp::arg("key") ) );
        
        }
        { //::xfx::Input::TestKey
        
            typedef bool ( ::xfx::Input::*test_key_function_type )( char const * ) const;
            
            Input_exposer.def( 
                "test_key"
                , test_key_function_type( &::xfx::Input::TestKey )
                , ( bp::arg("key") ) );
        
        }
        { //::xfx::Input::TestKeyPressed
        
            typedef bool ( ::xfx::Input::*test_key_pressed_function_type )( unsigned int ) const;
            
            Input_exposer.def( 
                "test_key_pressed"
                , test_key_pressed_function_type( &::xfx::Input::TestKeyPressed )
                , ( bp::arg("key") ) );
        
        }
        { //::xfx::Input::TestKeyPressed
        
            typedef bool ( ::xfx::Input::*test_key_pressed_function_type )( char const * ) const;
            
            Input_exposer.def( 
                "test_key_pressed"
                , test_key_pressed_function_type( &::xfx::Input::TestKeyPressed )
                , ( bp::arg("key") ) );
        
        }
        { //::xfx::Input::TestKeyReleased
        
            typedef bool ( ::xfx::Input::*test_key_released_function_type )( unsigned int ) const;
            
            Input_exposer.def( 
                "test_key_released"
                , test_key_released_function_type( &::xfx::Input::TestKeyReleased )
                , ( bp::arg("key") ) );
        
        }
        { //::xfx::Input::TestKeyReleased
        
            typedef bool ( ::xfx::Input::*test_key_released_function_type )( char const * ) const;
            
            Input_exposer.def( 
                "test_key_released"
                , test_key_released_function_type( &::xfx::Input::TestKeyReleased )
                , ( bp::arg("key") ) );
        
        }
        { //property "use_key_mapping"[fget=::xfx::Input::GetUseKeyMapping, fset=::xfx::Input::SetUseKeyMapping]
        
            typedef bool const & ( ::xfx::Input::*fget )(  ) const;
            typedef void ( ::xfx::Input::*fset )( bool const & ) ;
            
            Input_exposer.add_property( 
                "use_key_mapping"
                , bp::make_function( 
                      fget( &::xfx::Input::GetUseKeyMapping )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Input::SetUseKeyMapping )
                , "get\\set property, built on top of \"bool const & xfx::Input::GetUseKeyMapping() const [member function]\" and \"void xfx::Input::SetUseKeyMapping(bool const & use) [member function]\"" );
        
        }
        { //property "cursor_pos"[fget=::xfx::Input::GetCursorPos]
        
            typedef ::xfx::Vec2 ( ::xfx::Input::*fget )(  ) const;
            
            Input_exposer.add_property( 
                "cursor_pos"
                , fget( &::xfx::Input::GetCursorPos )
                , "get property, built on top of \"xfx::Vec2 xfx::Input::GetCursorPos() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Input const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Input >, boost::shared_ptr< xfx::Input const > >( );
    }

}

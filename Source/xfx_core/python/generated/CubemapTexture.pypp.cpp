// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "cubemaptexture.pypp.hpp"

namespace bp = boost::python;

struct CubemapTexture_wrapper : xfx::CubemapTexture, bp::wrapper< xfx::CubemapTexture > {

    CubemapTexture_wrapper( )
    : xfx::CubemapTexture( )
      , bp::wrapper< xfx::CubemapTexture >(){
        // null constructor
    
    }

    CubemapTexture_wrapper(::xfx::CubemapTexture const & tex )
    : xfx::CubemapTexture( boost::ref(tex) )
      , bp::wrapper< xfx::CubemapTexture >(){
        // copy constructor
    
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & filename ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( filename );
        else
            return this->xfx::CubemapTexture::LoadFile( filename );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & filename ) {
        return xfx::CubemapTexture::LoadFile( filename );
    }

    virtual ::HRESULT LoadMemory( void const * pmemory, long unsigned int filelen ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( pmemory, filelen );
        else
            return this->xfx::CubemapTexture::LoadMemory( pmemory, filelen );
    }
    
    
    ::HRESULT default_load_memory( void const * pmemory, long unsigned int filelen ) {
        return xfx::CubemapTexture::LoadMemory( pmemory, filelen );
    }

};

void register_CubemapTexture_class(){

    { //::xfx::CubemapTexture
        typedef bp::class_< CubemapTexture_wrapper, bp::bases< xfx::ITexture, xfx::Transformable3D, xfx::Resource > > CubemapTexture_exposer_t;
        CubemapTexture_exposer_t CubemapTexture_exposer = CubemapTexture_exposer_t( "CubemapTexture", bp::init< >() );
        bp::scope CubemapTexture_scope( CubemapTexture_exposer );
        CubemapTexture_exposer.def( bp::init< xfx::CubemapTexture const & >(( bp::arg("tex") )) );
        { //::xfx::CubemapTexture::Create
        
            typedef ::HRESULT ( ::xfx::CubemapTexture::*create_function_type )( unsigned int,unsigned int,::D3DFORMAT const & ) ;
            
            CubemapTexture_exposer.def( 
                "create"
                , create_function_type( &::xfx::CubemapTexture::Create )
                , ( bp::arg("width"), bp::arg("nummips"), bp::arg("fmt")=::D3DFMT_A8R8G8B8 ) );
        
        }
        { //::xfx::CubemapTexture::Free
        
            typedef void ( ::xfx::CubemapTexture::*free_function_type )(  ) ;
            
            CubemapTexture_exposer.def( 
                "free"
                , free_function_type( &::xfx::CubemapTexture::Free ) );
        
        }
        { //::xfx::CubemapTexture::GetSurfaceData
        
            typedef ::HRESULT ( ::xfx::CubemapTexture::*get_surface_data_function_type )( ::D3DCUBEMAP_FACES const &,::DWORD,::xfx::ARGB * ) const;
            
            CubemapTexture_exposer.def( 
                "get_surface_data"
                , get_surface_data_function_type( &::xfx::CubemapTexture::GetSurfaceData )
                , ( bp::arg("face"), bp::arg("level"), bp::arg("data") ) );
        
        }
        { //::xfx::CubemapTexture::LoadFace
        
            typedef ::HRESULT ( ::xfx::CubemapTexture::*load_face_function_type )( ::D3DCUBEMAP_FACES const &,::xfx::Texture const & ) ;
            
            CubemapTexture_exposer.def( 
                "load_face"
                , load_face_function_type( &::xfx::CubemapTexture::LoadFace )
                , ( bp::arg("face"), bp::arg("tex") ) );
        
        }
        { //::xfx::CubemapTexture::LoadFile
        
            typedef ::HRESULT ( ::xfx::CubemapTexture::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( CubemapTexture_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            CubemapTexture_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::CubemapTexture::LoadFile)
                , default_load_file_function_type(&CubemapTexture_wrapper::default_load_file)
                , ( bp::arg("filename") ) );
        
        }
        { //::xfx::CubemapTexture::LoadMemory
        
            typedef ::HRESULT ( ::xfx::CubemapTexture::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( CubemapTexture_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            CubemapTexture_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::CubemapTexture::LoadMemory)
                , default_load_memory_function_type(&CubemapTexture_wrapper::default_load_memory)
                , ( bp::arg("pmemory"), bp::arg("filelen") ) );
        
        }
        { //::xfx::CubemapTexture::SetSurfaceData
        
            typedef ::HRESULT ( ::xfx::CubemapTexture::*set_surface_data_function_type )( ::D3DCUBEMAP_FACES const &,::DWORD,::xfx::ARGB * ) ;
            
            CubemapTexture_exposer.def( 
                "set_surface_data"
                , set_surface_data_function_type( &::xfx::CubemapTexture::SetSurfaceData )
                , ( bp::arg("face"), bp::arg("level"), bp::arg("data") ) );
        
        }
        { //::xfx::CubemapTexture::operator=
        
            typedef ::xfx::CubemapTexture & ( ::xfx::CubemapTexture::*assign_function_type )( ::xfx::CubemapTexture const & ) ;
            
            CubemapTexture_exposer.def( 
                "assign"
                , assign_function_type( &::xfx::CubemapTexture::operator= )
                , ( bp::arg("tex") )
                , bp::return_self< >() );
        
        }
        { //property "width"[fget=::xfx::CubemapTexture::GetWidth]
        
            typedef unsigned int ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "width"
                , fget( &::xfx::CubemapTexture::GetWidth )
                , "get property, built on top of \"unsigned int xfx::CubemapTexture::GetWidth() const [member function]\"" );
        
        }
        { //property "height"[fget=::xfx::CubemapTexture::GetHeight]
        
            typedef unsigned int ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "height"
                , fget( &::xfx::CubemapTexture::GetHeight )
                , "get property, built on top of \"unsigned int xfx::CubemapTexture::GetHeight() const [member function]\"" );
        
        }
        { //property "texture_matrix"[fget=::xfx::CubemapTexture::GetTextureMatrix]
        
            typedef ::xfx::Mat4 const & ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "texture_matrix"
                , bp::make_function( 
                      fget( &::xfx::CubemapTexture::GetTextureMatrix )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Mat4 const & xfx::CubemapTexture::GetTextureMatrix() const [member function]\"" );
        
        }
        { //property "transformation"[fget=::xfx::CubemapTexture::GetTransformation]
        
            typedef ::xfx::Mat4 const & ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "transformation"
                , bp::make_function( 
                      fget( &::xfx::CubemapTexture::GetTransformation )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Mat4 const & xfx::CubemapTexture::GetTransformation() const [member function]\"" );
        
        }
        { //property "identity_result_transform"[fget=::xfx::CubemapTexture::IsIdentityResultTransform]
        
            typedef bool ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "identity_result_transform"
                , fget( &::xfx::CubemapTexture::IsIdentityResultTransform )
                , "get property, built on top of \"bool xfx::CubemapTexture::IsIdentityResultTransform() const [member function]\"" );
        
        }
        { //property "num_mips"[fget=::xfx::CubemapTexture::NumMips]
        
            typedef unsigned int const & ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "num_mips"
                , bp::make_function( 
                      fget( &::xfx::CubemapTexture::NumMips )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"unsigned int const & xfx::CubemapTexture::NumMips() const [member function]\"" );
        
        }
        { //property "empty"[fget=::xfx::CubemapTexture::IsEmpty]
        
            typedef bool ( ::xfx::CubemapTexture::*fget )(  ) const;
            
            CubemapTexture_exposer.add_property( 
                "empty"
                , fget( &::xfx::CubemapTexture::IsEmpty )
                , "get property, built on top of \"bool xfx::CubemapTexture::IsEmpty() const [member function]\"" );
        
        }
        { //property "cache"[fget=::xfx::CubemapTexture::Cache]
        
            typedef ::xfx::Cache<xfx::CubemapTexture> & ( *fget )(  );
            
            CubemapTexture_exposer.add_static_property( 
                "cache"
                , bp::make_function( 
                      fget( &::xfx::CubemapTexture::Cache )
                    , bp::return_value_policy< bp::reference_existing_object >() )  );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::CubemapTexture const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::CubemapTexture >, boost::shared_ptr< xfx::CubemapTexture const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "booksmanager.pypp.hpp"

namespace bp = boost::python;

void register_BooksManager_class(){

    { //::xfx::BooksManager
        typedef bp::class_< xfx::BooksManager, bp::bases< xfx::Singleton< xfx::BooksManager > >, boost::noncopyable > BooksManager_exposer_t;
        BooksManager_exposer_t BooksManager_exposer = BooksManager_exposer_t( "BooksManager", bp::no_init );
        bp::scope BooksManager_scope( BooksManager_exposer );
        { //::xfx::BooksManager::AddBook
        
            typedef ::std::list< xfx::MessagesBook >::iterator ( ::xfx::BooksManager::*add_book_function_type )( ::xfx::MessagesBook const & ) ;
            
            BooksManager_exposer.def( 
                "add_book"
                , add_book_function_type( &::xfx::BooksManager::AddBook )
                , ( bp::arg("book") ) );
        
        }
        { //::xfx::BooksManager::Clear
        
            typedef void ( ::xfx::BooksManager::*clear_function_type )(  ) ;
            
            BooksManager_exposer.def( 
                "clear"
                , clear_function_type( &::xfx::BooksManager::Clear ) );
        
        }
        { //::xfx::BooksManager::GetBook
        
            typedef ::xfx::MessagesBook & ( ::xfx::BooksManager::*get_book_function_type )( ::std::list< xfx::MessagesBook >::iterator const & ) ;
            
            BooksManager_exposer.def( 
                "get_book"
                , get_book_function_type( &::xfx::BooksManager::GetBook )
                , ( bp::arg("book_id") )
                , bp::return_internal_reference< >() );
        
        }
        { //::xfx::BooksManager::GetEntry
        
            typedef ::xfx::MessagesBook::Entry const & ( ::xfx::BooksManager::*get_entry_function_type )( ::xfx::String const & ) const;
            
            BooksManager_exposer.def( 
                "get_entry"
                , get_entry_function_type( &::xfx::BooksManager::GetEntry )
                , ( bp::arg("id") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::xfx::BooksManager::GetEntry
        
            typedef ::xfx::MessagesBook::Entry const & ( ::xfx::BooksManager::*get_entry_function_type )( char const * ) const;
            
            BooksManager_exposer.def( 
                "get_entry"
                , get_entry_function_type( &::xfx::BooksManager::GetEntry )
                , ( bp::arg("id") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::xfx::BooksManager::IsEntryExists
        
            typedef bool ( ::xfx::BooksManager::*is_entry_exists_function_type )( ::xfx::String const & ) const;
            
            BooksManager_exposer.def( 
                "is_entry_exists"
                , is_entry_exists_function_type( &::xfx::BooksManager::IsEntryExists )
                , ( bp::arg("id") ) );
        
        }
        { //::xfx::BooksManager::RemoveBook
        
            typedef void ( ::xfx::BooksManager::*remove_book_function_type )( ::std::list< xfx::MessagesBook >::iterator const & ) ;
            
            BooksManager_exposer.def( 
                "remove_book"
                , remove_book_function_type( &::xfx::BooksManager::RemoveBook )
                , ( bp::arg("book_id") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::BooksManager const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::BooksManager >, boost::shared_ptr< xfx::BooksManager const > >( );
    }

}

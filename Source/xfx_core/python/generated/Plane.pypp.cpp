// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "plane.pypp.hpp"

namespace bp = boost::python;

struct Plane_wrapper : xfx::Primitives::Plane, bp::wrapper< xfx::Primitives::Plane > {

    Plane_wrapper(xfx::Primitives::Plane const & arg )
    : xfx::Primitives::Plane( arg )
      , bp::wrapper< xfx::Primitives::Plane >(){
        // copy constructor
        
    }

    Plane_wrapper( )
    : xfx::Primitives::Plane( )
      , bp::wrapper< xfx::Primitives::Plane >(){
        // null constructor
    
    }

    Plane_wrapper(float const & a, float const & b, float const & c, float const & d )
    : xfx::Primitives::Plane( a, b, c, d )
      , bp::wrapper< xfx::Primitives::Plane >(){
        // constructor
    
    }

    virtual void Projection( float & a, float & b, ::xfx::Vec3 const & axis ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_projection = this->get_override( "projection" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_projection.ptr(), axis );
            a = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "a" ) );
            b = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "b" ) );
        }
        else{
            xfx::Primitives::Plane::Projection( a, b, boost::ref(axis) );
        }
    }
    
    static boost::python::tuple default_projection( ::xfx::Primitives::Plane const & inst, ::xfx::Vec3 const & axis ){
        float a2;
        float b2;
        if( dynamic_cast< Plane_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::xfx::Primitives::Plane::Projection(a2, b2, axis);
        }
        else{
            inst.Projection(a2, b2, axis);
        }
        return bp::make_tuple( a2, b2 );
    }

};

void register_Plane_class(){

    { //::xfx::Primitives::Plane
        typedef bp::class_< Plane_wrapper, bp::bases< xfx::Primitive > > Plane_exposer_t;
        Plane_exposer_t Plane_exposer = Plane_exposer_t( "Plane", bp::init< >() );
        bp::scope Plane_scope( Plane_exposer );
        Plane_exposer.def( bp::init< float const &, float const &, float const &, float const & >(( bp::arg("a"), bp::arg("b"), bp::arg("c"), bp::arg("d") )) );
        { //::xfx::Primitives::Plane::ABCD
        
            typedef void ( ::xfx::Primitives::Plane::*abcd_function_type )( float const &,float const &,float const &,float const & ) ;
            
            Plane_exposer.def( 
                "abcd"
                , abcd_function_type( &::xfx::Primitives::Plane::ABCD )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("c"), bp::arg("d") ) );
        
        }
        { //::xfx::Primitives::Plane::From
        
            typedef void ( ::xfx::Primitives::Plane::*from_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const & ) ;
            
            Plane_exposer.def( 
                "from"
                , from_function_type( &::xfx::Primitives::Plane::From )
                , ( bp::arg("origin"), bp::arg("normal") ) );
        
        }
        { //::xfx::Primitives::Plane::Projection
        
            typedef boost::python::tuple ( *default_projection_function_type )( ::xfx::Primitives::Plane const &,::xfx::Vec3 const & );
            
            Plane_exposer.def( 
                "projection"
                , default_projection_function_type( &Plane_wrapper::default_projection )
                , ( bp::arg("inst"), bp::arg("axis") ) );
        
        }
        { //::xfx::Primitives::Plane::Transform
        
            typedef void ( ::xfx::Primitives::Plane::*transform_function_type )( ::xfx::Mat4 const & ) ;
            
            Plane_exposer.def( 
                "transform"
                , transform_function_type( &::xfx::Primitives::Plane::Transform )
                , ( bp::arg("m") ) );
        
        }
        { //property "a"[fget=::xfx::Primitives::Plane::A, fset=::xfx::Primitives::Plane::SetA]
        
            typedef float const & ( ::xfx::Primitives::Plane::*fget )(  ) const;
            typedef void ( ::xfx::Primitives::Plane::*fset )( float const & ) ;
            
            Plane_exposer.add_property( 
                "a"
                , bp::make_function( 
                      fget( &::xfx::Primitives::Plane::A )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Primitives::Plane::SetA )
                , "get\\set property, built on top of \"float const & xfx::Primitives::Plane::A() const [member function]\" and \"void xfx::Primitives::Plane::SetA(float const & a) [member function]\"" );
        
        }
        { //property "b"[fget=::xfx::Primitives::Plane::B, fset=::xfx::Primitives::Plane::SetB]
        
            typedef float const & ( ::xfx::Primitives::Plane::*fget )(  ) const;
            typedef void ( ::xfx::Primitives::Plane::*fset )( float const & ) ;
            
            Plane_exposer.add_property( 
                "b"
                , bp::make_function( 
                      fget( &::xfx::Primitives::Plane::B )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Primitives::Plane::SetB )
                , "get\\set property, built on top of \"float const & xfx::Primitives::Plane::B() const [member function]\" and \"void xfx::Primitives::Plane::SetB(float const & b) [member function]\"" );
        
        }
        { //property "c"[fget=::xfx::Primitives::Plane::C, fset=::xfx::Primitives::Plane::SetC]
        
            typedef float const & ( ::xfx::Primitives::Plane::*fget )(  ) const;
            typedef void ( ::xfx::Primitives::Plane::*fset )( float const & ) ;
            
            Plane_exposer.add_property( 
                "c"
                , bp::make_function( 
                      fget( &::xfx::Primitives::Plane::C )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Primitives::Plane::SetC )
                , "get\\set property, built on top of \"float const & xfx::Primitives::Plane::C() const [member function]\" and \"void xfx::Primitives::Plane::SetC(float const & c) [member function]\"" );
        
        }
        { //property "d"[fget=::xfx::Primitives::Plane::D, fset=::xfx::Primitives::Plane::SetD]
        
            typedef float const & ( ::xfx::Primitives::Plane::*fget )(  ) const;
            typedef void ( ::xfx::Primitives::Plane::*fset )( float const & ) ;
            
            Plane_exposer.add_property( 
                "d"
                , bp::make_function( 
                      fget( &::xfx::Primitives::Plane::D )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Primitives::Plane::SetD )
                , "get\\set property, built on top of \"float const & xfx::Primitives::Plane::D() const [member function]\" and \"void xfx::Primitives::Plane::SetD(float const & d) [member function]\"" );
        
        }
        { //property "normal"[fget=::xfx::Primitives::Plane::Normal]
        
            typedef ::xfx::Vec3 ( ::xfx::Primitives::Plane::*fget )(  ) const;
            
            Plane_exposer.add_property( 
                "normal"
                , fget( &::xfx::Primitives::Plane::Normal )
                , "get property, built on top of \"xfx::Vec3 xfx::Primitives::Plane::Normal() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Primitives::Plane const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Primitives::Plane >, boost::shared_ptr< xfx::Primitives::Plane const > >( );
    }

}

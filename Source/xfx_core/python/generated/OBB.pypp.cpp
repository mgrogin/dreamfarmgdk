// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "obb.pypp.hpp"

namespace bp = boost::python;

struct OBB_wrapper : xfx::Primitives::OBB, bp::wrapper< xfx::Primitives::OBB > {

    OBB_wrapper(xfx::Primitives::OBB const & arg )
    : xfx::Primitives::OBB( arg )
      , bp::wrapper< xfx::Primitives::OBB >(){
        // copy constructor
        
    }

    OBB_wrapper( )
    : xfx::Primitives::OBB( )
      , bp::wrapper< xfx::Primitives::OBB >(){
        // null constructor
    
    }

    OBB_wrapper(::xfx::Vec3 const & loc, ::xfx::Vec3 const & e1, ::xfx::Vec3 const & e2, ::xfx::Vec3 const & e3 )
    : xfx::Primitives::OBB( boost::ref(loc), boost::ref(e1), boost::ref(e2), boost::ref(e3) )
      , bp::wrapper< xfx::Primitives::OBB >(){
        // constructor
    
    }

    OBB_wrapper(::xfx::Vec3 const & v0, ::xfx::Vec3 const & v1 )
    : xfx::Primitives::OBB( boost::ref(v0), boost::ref(v1) )
      , bp::wrapper< xfx::Primitives::OBB >(){
        // constructor
    
    }

    OBB_wrapper(::xfx::Primitives::Triangle const & tri )
    : xfx::Primitives::OBB( boost::ref(tri) )
      , bp::wrapper< xfx::Primitives::OBB >(){
        // constructor
    
    }

    OBB_wrapper(::xfx::Primitives::AABB const & aabb )
    : xfx::Primitives::OBB( boost::ref(aabb) )
      , bp::wrapper< xfx::Primitives::OBB >(){
        // constructor
    
    }

    virtual void Projection( float & a, float & b, ::xfx::Vec3 const & axis ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_projection = this->get_override( "projection" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_projection.ptr(), axis );
            a = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "a" ) );
            b = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "b" ) );
        }
        else{
            xfx::Primitives::OBB::Projection( a, b, boost::ref(axis) );
        }
    }
    
    static boost::python::tuple default_projection( ::xfx::Primitives::OBB const & inst, ::xfx::Vec3 const & axis ){
        float a2;
        float b2;
        if( dynamic_cast< OBB_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::xfx::Primitives::OBB::Projection(a2, b2, axis);
        }
        else{
            inst.Projection(a2, b2, axis);
        }
        return bp::make_tuple( a2, b2 );
    }

};

void register_OBB_class(){

    { //::xfx::Primitives::OBB
        typedef bp::class_< OBB_wrapper, bp::bases< xfx::Primitive > > OBB_exposer_t;
        OBB_exposer_t OBB_exposer = OBB_exposer_t( "OBB", bp::init< >() );
        bp::scope OBB_scope( OBB_exposer );
        OBB_exposer.def( bp::init< xfx::Vec3 const &, xfx::Vec3 const &, xfx::Vec3 const &, xfx::Vec3 const & >(( bp::arg("loc"), bp::arg("e1"), bp::arg("e2"), bp::arg("e3") )) );
        OBB_exposer.def( bp::init< xfx::Vec3 const &, xfx::Vec3 const & >(( bp::arg("v0"), bp::arg("v1") )) );
        OBB_exposer.def( bp::init< xfx::Primitives::Triangle const & >(( bp::arg("tri") )) );
        bp::implicitly_convertible< xfx::Primitives::Triangle const &, xfx::Primitives::OBB >();
        OBB_exposer.def( bp::init< xfx::Primitives::AABB const & >(( bp::arg("aabb") )) );
        bp::implicitly_convertible< xfx::Primitives::AABB const &, xfx::Primitives::OBB >();
        { //::xfx::Primitives::OBB::From
        
            typedef void ( ::xfx::Primitives::OBB::*from_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const & ) ;
            
            OBB_exposer.def( 
                "from"
                , from_function_type( &::xfx::Primitives::OBB::From )
                , ( bp::arg("v0"), bp::arg("v1") ) );
        
        }
        { //::xfx::Primitives::OBB::From
        
            typedef void ( ::xfx::Primitives::OBB::*from_function_type )( ::xfx::Primitives::Triangle const & ) ;
            
            OBB_exposer.def( 
                "from"
                , from_function_type( &::xfx::Primitives::OBB::From )
                , ( bp::arg("tri") ) );
        
        }
        { //::xfx::Primitives::OBB::From
        
            typedef void ( ::xfx::Primitives::OBB::*from_function_type )( ::xfx::Primitives::AABB const & ) ;
            
            OBB_exposer.def( 
                "from"
                , from_function_type( &::xfx::Primitives::OBB::From )
                , ( bp::arg("aabb") ) );
        
        }
        { //::xfx::Primitives::OBB::Projection
        
            typedef boost::python::tuple ( *default_projection_function_type )( ::xfx::Primitives::OBB const &,::xfx::Vec3 const & );
            
            OBB_exposer.def( 
                "projection"
                , default_projection_function_type( &OBB_wrapper::default_projection )
                , ( bp::arg("inst"), bp::arg("axis") ) );
        
        }
        { //::xfx::Primitives::OBB::Transform
        
            typedef void ( ::xfx::Primitives::OBB::*transform_function_type )( ::xfx::Mat4 const & ) ;
            
            OBB_exposer.def( 
                "transform"
                , transform_function_type( &::xfx::Primitives::OBB::Transform )
                , ( bp::arg("m") ) );
        
        }
        { //property "location"[fget=::xfx::Primitives::OBB::Location, fset=::xfx::Primitives::OBB::SetLocation]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Primitives::OBB::*fget )(  ) const;
            typedef void ( ::xfx::Primitives::OBB::*fset )( ::xfx::Vec3 const & ) ;
            
            OBB_exposer.add_property( 
                "location"
                , bp::make_function( 
                      fget( &::xfx::Primitives::OBB::Location )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Primitives::OBB::SetLocation )
                , "get\\set property, built on top of \"xfx::Vec3 const & xfx::Primitives::OBB::Location() const [member function]\" and \"void xfx::Primitives::OBB::SetLocation(xfx::Vec3 const & l) [member function]\"" );
        
        }
        { //property "enlarge_to_aabb"[fget=::xfx::Primitives::OBB::EnlargeToAABB]
        
            typedef ::xfx::Primitives::AABB ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "enlarge_to_aabb"
                , fget( &::xfx::Primitives::OBB::EnlargeToAABB )
                , "get property, built on top of \"xfx::Primitives::AABB xfx::Primitives::OBB::EnlargeToAABB() const [member function]\"" );
        
        }
        { //property "center"[fget=::xfx::Primitives::OBB::Center]
        
            typedef ::xfx::Vec3 ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "center"
                , fget( &::xfx::Primitives::OBB::Center )
                , "get property, built on top of \"xfx::Vec3 xfx::Primitives::OBB::Center() const [member function]\"" );
        
        }
        { //property "size_sq"[fget=::xfx::Primitives::OBB::SizeSq]
        
            typedef float ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "size_sq"
                , fget( &::xfx::Primitives::OBB::SizeSq )
                , "get property, built on top of \"float xfx::Primitives::OBB::SizeSq() const [member function]\"" );
        
        }
        { //property "size"[fget=::xfx::Primitives::OBB::Size]
        
            typedef float ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "size"
                , fget( &::xfx::Primitives::OBB::Size )
                , "get property, built on top of \"float xfx::Primitives::OBB::Size() const [member function]\"" );
        
        }
        { //property "e1"[fget=::xfx::Primitives::OBB::E1]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "e1"
                , bp::make_function( 
                      fget( &::xfx::Primitives::OBB::E1 )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Vec3 const & xfx::Primitives::OBB::E1() const [member function]\"" );
        
        }
        { //property "e2"[fget=::xfx::Primitives::OBB::E2]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "e2"
                , bp::make_function( 
                      fget( &::xfx::Primitives::OBB::E2 )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Vec3 const & xfx::Primitives::OBB::E2() const [member function]\"" );
        
        }
        { //property "e3"[fget=::xfx::Primitives::OBB::E3]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Primitives::OBB::*fget )(  ) const;
            
            OBB_exposer.add_property( 
                "e3"
                , bp::make_function( 
                      fget( &::xfx::Primitives::OBB::E3 )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Vec3 const & xfx::Primitives::OBB::E3() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Primitives::OBB const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Primitives::OBB >, boost::shared_ptr< xfx::Primitives::OBB const > >( );
    }

}

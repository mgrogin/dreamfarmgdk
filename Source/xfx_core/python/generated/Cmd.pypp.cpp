// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "cmd.pypp.hpp"

namespace bp = boost::python;

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS( Cmd_register_var_overloads, xfx::Cmd::RegisterVar, 2, 3 )

void register_Cmd_class(){

    { //::xfx::Cmd
        typedef bp::class_< xfx::Cmd, bp::bases< xfx::Singleton< xfx::Cmd > >, boost::noncopyable > Cmd_exposer_t;
        Cmd_exposer_t Cmd_exposer = Cmd_exposer_t( "Cmd", bp::no_init );
        bp::scope Cmd_scope( Cmd_exposer );
        { //::xfx::Cmd::RegisterVar
        
            typedef ::boost::shared_ptr<xfx::Var> ( ::xfx::Cmd::*register_var_function_type )( ::xfx::String const &,::xfx::String const &,::DWORD const & ) ;
            
            Cmd_exposer.def( 
                "register_var"
                , register_var_function_type( &::xfx::Cmd::RegisterVar )
                , Cmd_register_var_overloads( 
                        bp::args( "var", "def", "flags" ) ) );
        
        }
        bp::enum_< xfx::Cmd::ECommandFlags>("ECommandFlags")
            .value("ECF_DEFAULT", xfx::Cmd::ECF_DEFAULT)
            .value("ECF_HIDDEN", xfx::Cmd::ECF_HIDDEN)
            .value("ECF_DEVELOPER", xfx::Cmd::ECF_DEVELOPER)
            .value("ECF_CHEAT", xfx::Cmd::ECF_CHEAT)
            .value("ECF_SERVER_CMD", xfx::Cmd::ECF_SERVER_CMD)
            .export_values()
            ;
        bp::enum_< xfx::Cmd::EExecutionContext>("EExecutionContext")
            .value("EEC_CODE", xfx::Cmd::EEC_CODE)
            .value("EEC_USER", xfx::Cmd::EEC_USER)
            .export_values()
            ;
        bp::enum_< xfx::Cmd::EVariableFlags>("EVariableFlags")
            .value("EVF_DEFAULT", xfx::Cmd::EVF_DEFAULT)
            .value("EVF_HIDDEN", xfx::Cmd::EVF_HIDDEN)
            .value("EVF_DEVELOPER", xfx::Cmd::EVF_DEVELOPER)
            .value("EVF_CHEAT", xfx::Cmd::EVF_CHEAT)
            .value("EVF_AUTORESET", xfx::Cmd::EVF_AUTORESET)
            .value("EVF_SERVER_VAR", xfx::Cmd::EVF_SERVER_VAR)
            .value("EVF_CONST", xfx::Cmd::EVF_CONST)
            .export_values()
            ;
        { //::xfx::Cmd::Execute
        
            typedef void ( ::xfx::Cmd::*execute_function_type )( ::xfx::String const & ) ;
            
            Cmd_exposer.def( 
                "execute"
                , execute_function_type( &::xfx::Cmd::Execute )
                , ( bp::arg("cmd") ) );
        
        }
        { //::xfx::Cmd::GetCmdFlags
        
            typedef ::DWORD ( ::xfx::Cmd::*get_cmd_flags_function_type )( ::xfx::String const & ) const;
            
            Cmd_exposer.def( 
                "get_cmd_flags"
                , get_cmd_flags_function_type( &::xfx::Cmd::GetCmdFlags )
                , ( bp::arg("cmd") ) );
        
        }
        { //::xfx::Cmd::GetVarFlags
        
            typedef ::DWORD ( ::xfx::Cmd::*get_var_flags_function_type )( ::xfx::String const & ) const;
            
            Cmd_exposer.def( 
                "get_var_flags"
                , get_var_flags_function_type( &::xfx::Cmd::GetVarFlags )
                , ( bp::arg("var") ) );
        
        }
        { //::xfx::Cmd::ResetVariables
        
            typedef void ( ::xfx::Cmd::*reset_variables_function_type )( bool ) ;
            
            Cmd_exposer.def( 
                "reset_variables"
                , reset_variables_function_type( &::xfx::Cmd::ResetVariables )
                , ( bp::arg("reset_all")=(bool)(false) ) );
        
        }
        { //property "execution_context"[fget=::xfx::Cmd::GetExecutionContext, fset=::xfx::Cmd::SetExecutionContext]
        
            typedef ::xfx::Cmd::EExecutionContext const & ( ::xfx::Cmd::*fget )(  ) const;
            typedef void ( ::xfx::Cmd::*fset )( ::xfx::Cmd::EExecutionContext const & ) ;
            
            Cmd_exposer.add_property( 
                "execution_context"
                , bp::make_function( 
                      fget( &::xfx::Cmd::GetExecutionContext )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Cmd::SetExecutionContext )
                , "get\\set property, built on top of \"xfx::Cmd::EExecutionContext const & xfx::Cmd::GetExecutionContext() const [member function]\" and \"void xfx::Cmd::SetExecutionContext(xfx::Cmd::EExecutionContext const & cont) [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Cmd const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Cmd >, boost::shared_ptr< xfx::Cmd const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "profilingmanager.pypp.hpp"

namespace bp = boost::python;

void register_ProfilingManager_class(){

    { //::xfx::ProfilingManager
        typedef bp::class_< xfx::ProfilingManager, bp::bases< xfx::Singleton< xfx::ProfilingManager > >, boost::noncopyable > ProfilingManager_exposer_t;
        ProfilingManager_exposer_t ProfilingManager_exposer = ProfilingManager_exposer_t( "ProfilingManager", bp::no_init );
        bp::scope ProfilingManager_scope( ProfilingManager_exposer );
        { //::xfx::ProfilingManager::DrawPerformanceInfo
        
            typedef void ( ::xfx::ProfilingManager::*draw_performance_info_function_type )( ::xfx::Font const &,::boost::shared_ptr< xfx::Shader const > const & ) const;
            
            ProfilingManager_exposer.def( 
                "draw_performance_info"
                , draw_performance_info_function_type( &::xfx::ProfilingManager::DrawPerformanceInfo )
                , ( bp::arg("fnt"), bp::arg("white_shd") ) );
        
        }
        { //::xfx::ProfilingManager::PauseResumeExternalProfiler
        
            typedef void ( ::xfx::ProfilingManager::*pause_resume_external_profiler_function_type )( bool ) const;
            
            ProfilingManager_exposer.def( 
                "pause_resume_external_profiler"
                , pause_resume_external_profiler_function_type( &::xfx::ProfilingManager::PauseResumeExternalProfiler )
                , ( bp::arg("pause") ) );
        
        }
        { //::xfx::ProfilingManager::RegisterProfilerObject
        
            typedef ::DWORD ( ::xfx::ProfilingManager::*register_profiler_object_function_type )( char const *,char const * ) ;
            
            ProfilingManager_exposer.def( 
                "register_profiler_object"
                , register_profiler_object_function_type( &::xfx::ProfilingManager::RegisterProfilerObject )
                , ( bp::arg("name"), bp::arg("group") ) );
        
        }
        { //::xfx::ProfilingManager::SaveProfilerResults
        
            typedef void ( ::xfx::ProfilingManager::*save_profiler_results_function_type )(  ) ;
            
            ProfilingManager_exposer.def( 
                "save_profiler_results"
                , save_profiler_results_function_type( &::xfx::ProfilingManager::SaveProfilerResults ) );
        
        }
        { //::xfx::ProfilingManager::SetFrameTime
        
            typedef void ( ::xfx::ProfilingManager::*set_frame_time_function_type )( ::DWORD const & ) ;
            
            ProfilingManager_exposer.def( 
                "set_frame_time"
                , set_frame_time_function_type( &::xfx::ProfilingManager::SetFrameTime )
                , ( bp::arg("mspf100") ) );
        
        }
        { //::xfx::ProfilingManager::StartProfiler
        
            typedef void ( ::xfx::ProfilingManager::*start_profiler_function_type )( ::DWORD const & ) ;
            
            ProfilingManager_exposer.def( 
                "start_profiler"
                , start_profiler_function_type( &::xfx::ProfilingManager::StartProfiler )
                , ( bp::arg("profile_object_id") ) );
        
        }
        { //::xfx::ProfilingManager::StopProfiler
        
            typedef void ( ::xfx::ProfilingManager::*stop_profiler_function_type )(  ) ;
            
            ProfilingManager_exposer.def( 
                "stop_profiler"
                , stop_profiler_function_type( &::xfx::ProfilingManager::StopProfiler ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::ProfilingManager const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::ProfilingManager >, boost::shared_ptr< xfx::ProfilingManager const > >( );
    }

}

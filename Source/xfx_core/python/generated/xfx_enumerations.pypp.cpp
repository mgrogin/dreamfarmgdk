// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "xfx_enumerations.pypp.hpp"

namespace bp = boost::python;

void register_enumerations(){

    bp::enum_< _D3DCMPFUNC>("_D3DCMPFUNC")
        .value("D3DCMP_NEVER", D3DCMP_NEVER)
        .value("D3DCMP_LESS", D3DCMP_LESS)
        .value("D3DCMP_EQUAL", D3DCMP_EQUAL)
        .value("D3DCMP_LESSEQUAL", D3DCMP_LESSEQUAL)
        .value("D3DCMP_GREATER", D3DCMP_GREATER)
        .value("D3DCMP_NOTEQUAL", D3DCMP_NOTEQUAL)
        .value("D3DCMP_GREATEREQUAL", D3DCMP_GREATEREQUAL)
        .value("D3DCMP_ALWAYS", D3DCMP_ALWAYS)
        .value("D3DCMP_FORCE_DWORD", D3DCMP_FORCE_DWORD)
        .export_values()
        ;

    bp::enum_< _D3DCUBEMAP_FACES>("_D3DCUBEMAP_FACES")
        .value("D3DCUBEMAP_FACE_POSITIVE_X", D3DCUBEMAP_FACE_POSITIVE_X)
        .value("D3DCUBEMAP_FACE_NEGATIVE_X", D3DCUBEMAP_FACE_NEGATIVE_X)
        .value("D3DCUBEMAP_FACE_POSITIVE_Y", D3DCUBEMAP_FACE_POSITIVE_Y)
        .value("D3DCUBEMAP_FACE_NEGATIVE_Y", D3DCUBEMAP_FACE_NEGATIVE_Y)
        .value("D3DCUBEMAP_FACE_POSITIVE_Z", D3DCUBEMAP_FACE_POSITIVE_Z)
        .value("D3DCUBEMAP_FACE_NEGATIVE_Z", D3DCUBEMAP_FACE_NEGATIVE_Z)
        .value("D3DCUBEMAP_FACE_FORCE_DWORD", D3DCUBEMAP_FACE_FORCE_DWORD)
        .export_values()
        ;

    bp::enum_< _D3DFORMAT>("_D3DFORMAT")
        .value("D3DFMT_UNKNOWN", D3DFMT_UNKNOWN)
        .value("D3DFMT_R8G8B8", D3DFMT_R8G8B8)
        .value("D3DFMT_A8R8G8B8", D3DFMT_A8R8G8B8)
        .value("D3DFMT_X8R8G8B8", D3DFMT_X8R8G8B8)
        .value("D3DFMT_R5G6B5", D3DFMT_R5G6B5)
        .value("D3DFMT_X1R5G5B5", D3DFMT_X1R5G5B5)
        .value("D3DFMT_A1R5G5B5", D3DFMT_A1R5G5B5)
        .value("D3DFMT_A4R4G4B4", D3DFMT_A4R4G4B4)
        .value("D3DFMT_R3G3B2", D3DFMT_R3G3B2)
        .value("D3DFMT_A8", D3DFMT_A8)
        .value("D3DFMT_A8R3G3B2", D3DFMT_A8R3G3B2)
        .value("D3DFMT_X4R4G4B4", D3DFMT_X4R4G4B4)
        .value("D3DFMT_A2B10G10R10", D3DFMT_A2B10G10R10)
        .value("D3DFMT_A8B8G8R8", D3DFMT_A8B8G8R8)
        .value("D3DFMT_X8B8G8R8", D3DFMT_X8B8G8R8)
        .value("D3DFMT_G16R16", D3DFMT_G16R16)
        .value("D3DFMT_A2R10G10B10", D3DFMT_A2R10G10B10)
        .value("D3DFMT_A16B16G16R16", D3DFMT_A16B16G16R16)
        .value("D3DFMT_A8P8", D3DFMT_A8P8)
        .value("D3DFMT_P8", D3DFMT_P8)
        .value("D3DFMT_L8", D3DFMT_L8)
        .value("D3DFMT_A8L8", D3DFMT_A8L8)
        .value("D3DFMT_A4L4", D3DFMT_A4L4)
        .value("D3DFMT_V8U8", D3DFMT_V8U8)
        .value("D3DFMT_L6V5U5", D3DFMT_L6V5U5)
        .value("D3DFMT_X8L8V8U8", D3DFMT_X8L8V8U8)
        .value("D3DFMT_Q8W8V8U8", D3DFMT_Q8W8V8U8)
        .value("D3DFMT_V16U16", D3DFMT_V16U16)
        .value("D3DFMT_A2W10V10U10", D3DFMT_A2W10V10U10)
        .value("D3DFMT_UYVY", D3DFMT_UYVY)
        .value("D3DFMT_R8G8_B8G8", D3DFMT_R8G8_B8G8)
        .value("D3DFMT_YUY2", D3DFMT_YUY2)
        .value("D3DFMT_G8R8_G8B8", D3DFMT_G8R8_G8B8)
        .value("D3DFMT_DXT1", D3DFMT_DXT1)
        .value("D3DFMT_DXT2", D3DFMT_DXT2)
        .value("D3DFMT_DXT3", D3DFMT_DXT3)
        .value("D3DFMT_DXT4", D3DFMT_DXT4)
        .value("D3DFMT_DXT5", D3DFMT_DXT5)
        .value("D3DFMT_D16_LOCKABLE", D3DFMT_D16_LOCKABLE)
        .value("D3DFMT_D32", D3DFMT_D32)
        .value("D3DFMT_D15S1", D3DFMT_D15S1)
        .value("D3DFMT_D24S8", D3DFMT_D24S8)
        .value("D3DFMT_D24X8", D3DFMT_D24X8)
        .value("D3DFMT_D24X4S4", D3DFMT_D24X4S4)
        .value("D3DFMT_D16", D3DFMT_D16)
        .value("D3DFMT_D32F_LOCKABLE", D3DFMT_D32F_LOCKABLE)
        .value("D3DFMT_D24FS8", D3DFMT_D24FS8)
        .value("D3DFMT_L16", D3DFMT_L16)
        .value("D3DFMT_VERTEXDATA", D3DFMT_VERTEXDATA)
        .value("D3DFMT_INDEX16", D3DFMT_INDEX16)
        .value("D3DFMT_INDEX32", D3DFMT_INDEX32)
        .value("D3DFMT_Q16W16V16U16", D3DFMT_Q16W16V16U16)
        .value("D3DFMT_MULTI2_ARGB8", D3DFMT_MULTI2_ARGB8)
        .value("D3DFMT_R16F", D3DFMT_R16F)
        .value("D3DFMT_G16R16F", D3DFMT_G16R16F)
        .value("D3DFMT_A16B16G16R16F", D3DFMT_A16B16G16R16F)
        .value("D3DFMT_R32F", D3DFMT_R32F)
        .value("D3DFMT_G32R32F", D3DFMT_G32R32F)
        .value("D3DFMT_A32B32G32R32F", D3DFMT_A32B32G32R32F)
        .value("D3DFMT_CxV8U8", D3DFMT_CxV8U8)
        .value("D3DFMT_FORCE_DWORD", D3DFMT_FORCE_DWORD)
        .export_values()
        ;

    bp::enum_< _D3DPRIMITIVETYPE>("_D3DPRIMITIVETYPE")
        .value("D3DPT_POINTLIST", D3DPT_POINTLIST)
        .value("D3DPT_LINELIST", D3DPT_LINELIST)
        .value("D3DPT_LINESTRIP", D3DPT_LINESTRIP)
        .value("D3DPT_TRIANGLELIST", D3DPT_TRIANGLELIST)
        .value("D3DPT_TRIANGLESTRIP", D3DPT_TRIANGLESTRIP)
        .value("D3DPT_TRIANGLEFAN", D3DPT_TRIANGLEFAN)
        .value("D3DPT_FORCE_DWORD", D3DPT_FORCE_DWORD)
        .export_values()
        ;

    bp::enum_< _D3DTRANSFORMSTATETYPE>("_D3DTRANSFORMSTATETYPE")
        .value("D3DTS_VIEW", D3DTS_VIEW)
        .value("D3DTS_PROJECTION", D3DTS_PROJECTION)
        .value("D3DTS_TEXTURE0", D3DTS_TEXTURE0)
        .value("D3DTS_TEXTURE1", D3DTS_TEXTURE1)
        .value("D3DTS_TEXTURE2", D3DTS_TEXTURE2)
        .value("D3DTS_TEXTURE3", D3DTS_TEXTURE3)
        .value("D3DTS_TEXTURE4", D3DTS_TEXTURE4)
        .value("D3DTS_TEXTURE5", D3DTS_TEXTURE5)
        .value("D3DTS_TEXTURE6", D3DTS_TEXTURE6)
        .value("D3DTS_TEXTURE7", D3DTS_TEXTURE7)
        .value("D3DTS_FORCE_DWORD", D3DTS_FORCE_DWORD)
        .export_values()
        ;

}

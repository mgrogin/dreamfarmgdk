// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "timer.pypp.hpp"

namespace bp = boost::python;

void register_Timer_class(){

    { //::xfx::Timer
        typedef bp::class_< xfx::Timer > Timer_exposer_t;
        Timer_exposer_t Timer_exposer = Timer_exposer_t( "Timer", bp::no_init );
        bp::scope Timer_scope( Timer_exposer );
        Timer_exposer.def( bp::init< >() );
        Timer_exposer.def( bp::init< xfx::Timer const & >(( bp::arg("t") )) );
        { //::xfx::Timer::Pause
        
            typedef void ( ::xfx::Timer::*pause_function_type )(  ) ;
            
            Timer_exposer.def( 
                "pause"
                , pause_function_type( &::xfx::Timer::Pause ) );
        
        }
        { //::xfx::Timer::Resume
        
            typedef void ( ::xfx::Timer::*resume_function_type )(  ) ;
            
            Timer_exposer.def( 
                "resume"
                , resume_function_type( &::xfx::Timer::Resume ) );
        
        }
        { //::xfx::Timer::Update
        
            typedef void ( ::xfx::Timer::*update_function_type )(  ) ;
            
            Timer_exposer.def( 
                "update"
                , update_function_type( &::xfx::Timer::Update ) );
        
        }
        { //::xfx::Timer::operator=
        
            typedef ::xfx::Timer & ( ::xfx::Timer::*assign_function_type )( ::xfx::Timer const & ) ;
            
            Timer_exposer.def( 
                "assign"
                , assign_function_type( &::xfx::Timer::operator= )
                , ( bp::arg("t") )
                , bp::return_self< >() );
        
        }
        { //property "micro_seconds100"[fget=::xfx::Timer::GetMicroSeconds100, fset=::xfx::Timer::SetMicroSeconds100]
        
            typedef ::boost::uint32_t const & ( ::xfx::Timer::*fget )(  ) const;
            typedef void ( ::xfx::Timer::*fset )( ::boost::uint32_t const & ) ;
            
            Timer_exposer.add_property( 
                "micro_seconds100"
                , bp::make_function( 
                      fget( &::xfx::Timer::GetMicroSeconds100 )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Timer::SetMicroSeconds100 )
                , "get\\set property, built on top of \"boost::uint32_t const & xfx::Timer::GetMicroSeconds100() const [member function]\" and \"void xfx::Timer::SetMicroSeconds100(boost::uint32_t const & time) [member function]\"" );
        
        }
        { //property "mspf100"[fget=::xfx::Timer::GetMSPF100]
        
            typedef ::boost::uint32_t const & ( ::xfx::Timer::*fget )(  ) const;
            
            Timer_exposer.add_property( 
                "mspf100"
                , bp::make_function( 
                      fget( &::xfx::Timer::GetMSPF100 )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"boost::uint32_t const & xfx::Timer::GetMSPF100() const [member function]\"" );
        
        }
        { //property "paused"[fget=::xfx::Timer::IsPaused]
        
            typedef bool const & ( ::xfx::Timer::*fget )(  ) const;
            
            Timer_exposer.add_property( 
                "paused"
                , bp::make_function( 
                      fget( &::xfx::Timer::IsPaused )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"bool const & xfx::Timer::IsPaused() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Timer const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Timer >, boost::shared_ptr< xfx::Timer const > >( );
    }

}

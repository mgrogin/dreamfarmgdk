// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "aabb.pypp.hpp"

namespace bp = boost::python;

struct AABB_wrapper : xfx::Primitives::AABB, bp::wrapper< xfx::Primitives::AABB > {

    AABB_wrapper(xfx::Primitives::AABB const & arg )
    : xfx::Primitives::AABB( arg )
      , bp::wrapper< xfx::Primitives::AABB >(){
        // copy constructor
        
    }

    AABB_wrapper( )
    : xfx::Primitives::AABB( )
      , bp::wrapper< xfx::Primitives::AABB >(){
        // null constructor
    
    }

    AABB_wrapper(::xfx::Vec3 const & v0, ::xfx::Vec3 const & v1 )
    : xfx::Primitives::AABB( boost::ref(v0), boost::ref(v1) )
      , bp::wrapper< xfx::Primitives::AABB >(){
        // constructor
    
    }

    AABB_wrapper(::xfx::Primitives::Triangle const & tri )
    : xfx::Primitives::AABB( boost::ref(tri) )
      , bp::wrapper< xfx::Primitives::AABB >(){
        // constructor
    
    }

    virtual void Projection( float & a, float & b, ::xfx::Vec3 const & axis ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_projection = this->get_override( "projection" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_projection.ptr(), axis );
            a = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "a" ) );
            b = boost::python::extract< float >( pyplus_conv::get_out_argument( py_result, "b" ) );
        }
        else{
            xfx::Primitives::AABB::Projection( a, b, boost::ref(axis) );
        }
    }
    
    static boost::python::tuple default_projection( ::xfx::Primitives::AABB const & inst, ::xfx::Vec3 const & axis ){
        float a2;
        float b2;
        if( dynamic_cast< AABB_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::xfx::Primitives::AABB::Projection(a2, b2, axis);
        }
        else{
            inst.Projection(a2, b2, axis);
        }
        return bp::make_tuple( a2, b2 );
    }

};

void register_AABB_class(){

    { //::xfx::Primitives::AABB
        typedef bp::class_< AABB_wrapper, bp::bases< xfx::Primitive > > AABB_exposer_t;
        AABB_exposer_t AABB_exposer = AABB_exposer_t( "AABB", bp::init< >() );
        bp::scope AABB_scope( AABB_exposer );
        AABB_exposer.def( bp::init< xfx::Vec3 const &, xfx::Vec3 const & >(( bp::arg("v0"), bp::arg("v1") )) );
        AABB_exposer.def( bp::init< xfx::Primitives::Triangle const & >(( bp::arg("tri") )) );
        bp::implicitly_convertible< xfx::Primitives::Triangle const &, xfx::Primitives::AABB >();
        { //::xfx::Primitives::AABB::Enlarge
        
            typedef void ( ::xfx::Primitives::AABB::*enlarge_function_type )( ::xfx::Primitives::Triangle const & ) ;
            
            AABB_exposer.def( 
                "enlarge"
                , enlarge_function_type( &::xfx::Primitives::AABB::Enlarge )
                , ( bp::arg("tri") ) );
        
        }
        { //::xfx::Primitives::AABB::Enlarge
        
            typedef void ( ::xfx::Primitives::AABB::*enlarge_function_type )( ::xfx::Vec3 const & ) ;
            
            AABB_exposer.def( 
                "enlarge"
                , enlarge_function_type( &::xfx::Primitives::AABB::Enlarge )
                , ( bp::arg("point") ) );
        
        }
        { //::xfx::Primitives::AABB::EnlargeSize
        
            typedef void ( ::xfx::Primitives::AABB::*enlarge_size_function_type )( ::xfx::Vec3 const & ) ;
            
            AABB_exposer.def( 
                "enlarge_size"
                , enlarge_size_function_type( &::xfx::Primitives::AABB::EnlargeSize )
                , ( bp::arg("ofs") ) );
        
        }
        { //::xfx::Primitives::AABB::From
        
            typedef void ( ::xfx::Primitives::AABB::*from_function_type )( ::xfx::Vec3 const &,::xfx::Vec3 const & ) ;
            
            AABB_exposer.def( 
                "from"
                , from_function_type( &::xfx::Primitives::AABB::From )
                , ( bp::arg("v0"), bp::arg("v1") ) );
        
        }
        { //::xfx::Primitives::AABB::From
        
            typedef void ( ::xfx::Primitives::AABB::*from_function_type )( ::xfx::Primitives::Triangle const & ) ;
            
            AABB_exposer.def( 
                "from"
                , from_function_type( &::xfx::Primitives::AABB::From )
                , ( bp::arg("tri") ) );
        
        }
        { //::xfx::Primitives::AABB::IsInside
        
            typedef bool ( ::xfx::Primitives::AABB::*is_inside_function_type )( ::xfx::Vec3 const & ) const;
            
            AABB_exposer.def( 
                "is_inside"
                , is_inside_function_type( &::xfx::Primitives::AABB::IsInside )
                , ( bp::arg("point") ) );
        
        }
        { //::xfx::Primitives::AABB::Null
        
            typedef ::xfx::Primitives::AABB ( *null_function_type )(  );
            
            AABB_exposer.def( 
                "null"
                , null_function_type( &::xfx::Primitives::AABB::Null ) );
        
        }
        { //::xfx::Primitives::AABB::Projection
        
            typedef boost::python::tuple ( *default_projection_function_type )( ::xfx::Primitives::AABB const &,::xfx::Vec3 const & );
            
            AABB_exposer.def( 
                "projection"
                , default_projection_function_type( &AABB_wrapper::default_projection )
                , ( bp::arg("inst"), bp::arg("axis") ) );
        
        }
        { //::xfx::Primitives::AABB::Shift
        
            typedef void ( ::xfx::Primitives::AABB::*shift_function_type )( ::xfx::Vec3 const & ) ;
            
            AABB_exposer.def( 
                "shift"
                , shift_function_type( &::xfx::Primitives::AABB::Shift )
                , ( bp::arg("v") ) );
        
        }
        AABB_exposer.staticmethod( "null" );
        { //property "min"[fget=::xfx::Primitives::AABB::Min]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Primitives::AABB::*fget )(  ) const;
            
            AABB_exposer.add_property( 
                "min"
                , bp::make_function( 
                      fget( &::xfx::Primitives::AABB::Min )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Vec3 const & xfx::Primitives::AABB::Min() const [member function]\"" );
        
        }
        { //property "max"[fget=::xfx::Primitives::AABB::Max]
        
            typedef ::xfx::Vec3 const & ( ::xfx::Primitives::AABB::*fget )(  ) const;
            
            AABB_exposer.add_property( 
                "max"
                , bp::make_function( 
                      fget( &::xfx::Primitives::AABB::Max )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Vec3 const & xfx::Primitives::AABB::Max() const [member function]\"" );
        
        }
        { //property "center"[fget=::xfx::Primitives::AABB::Center]
        
            typedef ::xfx::Vec3 ( ::xfx::Primitives::AABB::*fget )(  ) const;
            
            AABB_exposer.add_property( 
                "center"
                , fget( &::xfx::Primitives::AABB::Center )
                , "get property, built on top of \"xfx::Vec3 xfx::Primitives::AABB::Center() const [member function]\"" );
        
        }
        { //property "size"[fget=::xfx::Primitives::AABB::Size]
        
            typedef ::xfx::Vec3 ( ::xfx::Primitives::AABB::*fget )(  ) const;
            
            AABB_exposer.add_property( 
                "size"
                , fget( &::xfx::Primitives::AABB::Size )
                , "get property, built on top of \"xfx::Vec3 xfx::Primitives::AABB::Size() const [member function]\"" );
        
        }
        { //property "random_point"[fget=::xfx::Primitives::AABB::RandomPoint]
        
            typedef ::xfx::Vec3 ( ::xfx::Primitives::AABB::*fget )(  ) const;
            
            AABB_exposer.add_property( 
                "random_point"
                , fget( &::xfx::Primitives::AABB::RandomPoint )
                , "get property, built on top of \"xfx::Vec3 xfx::Primitives::AABB::RandomPoint() const [member function]\"" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Primitives::AABB const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Primitives::AABB >, boost::shared_ptr< xfx::Primitives::AABB const > >( );
    }

}

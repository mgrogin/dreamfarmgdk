// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "texture.pypp.hpp"

namespace bp = boost::python;

struct Texture_wrapper : xfx::Texture, bp::wrapper< xfx::Texture > {

    Texture_wrapper( )
    : xfx::Texture( )
      , bp::wrapper< xfx::Texture >(){
        // null constructor
    
    }

    Texture_wrapper(::xfx::Texture const & tex )
    : xfx::Texture( boost::ref(tex) )
      , bp::wrapper< xfx::Texture >(){
        // copy constructor
    
    }

    static boost::python::tuple GetFrameTexCoords( int frame_num, float frame_width_rel, float frame_height_rel ){
        float u02;
        float v02;
        float u12;
        float v12;
        ::xfx::Texture::GetFrameTexCoords(u02, v02, u12, v12, frame_num, frame_width_rel, frame_height_rel);
        return bp::make_tuple( u02, v02, u12, v12 );
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & filename ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( filename );
        else
            return this->xfx::Texture::LoadFile( filename );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & filename ) {
        return xfx::Texture::LoadFile( filename );
    }

    virtual ::HRESULT LoadMemory( void const * pmemory, long unsigned int filelen ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( pmemory, filelen );
        else
            return this->xfx::Texture::LoadMemory( pmemory, filelen );
    }
    
    
    ::HRESULT default_load_memory( void const * pmemory, long unsigned int filelen ) {
        return xfx::Texture::LoadMemory( pmemory, filelen );
    }

};

void register_Texture_class(){

    { //::xfx::Texture
        typedef bp::class_< Texture_wrapper, bp::bases< xfx::ITexture, xfx::Resource, xfx::Transformable2D > > Texture_exposer_t;
        Texture_exposer_t Texture_exposer = Texture_exposer_t( "Texture", bp::no_init );
        bp::scope Texture_scope( Texture_exposer );
        Texture_exposer.def( bp::init< >() );
        Texture_exposer.def( bp::init< xfx::Texture const & >(( bp::arg("tex") )) );
        { //::xfx::Texture::CopyAlphaFromRGB
        
            typedef ::HRESULT ( ::xfx::Texture::*copy_alpha_from_rgb_function_type )( ::xfx::Texture const & ) ;
            
            Texture_exposer.def( 
                "copy_alpha_from_rgb"
                , copy_alpha_from_rgb_function_type( &::xfx::Texture::CopyAlphaFromRGB )
                , ( bp::arg("tex") ) );
        
        }
        { //::xfx::Texture::Create
        
            typedef ::HRESULT ( ::xfx::Texture::*create_function_type )( unsigned int,unsigned int,unsigned int,::D3DFORMAT const & ) ;
            
            Texture_exposer.def( 
                "create"
                , create_function_type( &::xfx::Texture::Create )
                , ( bp::arg("width"), bp::arg("height"), bp::arg("nummips"), bp::arg("fmt")=::D3DFMT_A8R8G8B8 ) );
        
        }
        { //::xfx::Texture::Free
        
            typedef void ( ::xfx::Texture::*free_function_type )(  ) ;
            
            Texture_exposer.def( 
                "free"
                , free_function_type( &::xfx::Texture::Free ) );
        
        }
        { //::xfx::Texture::GetFrameTexCoords
        
            typedef boost::python::tuple ( *get_frame_tex_coords_function_type )( int,float,float );
            
            Texture_exposer.def( 
                "get_frame_tex_coords"
                , get_frame_tex_coords_function_type( &Texture_wrapper::GetFrameTexCoords )
                , ( bp::arg("frame_num"), bp::arg("frame_width_rel"), bp::arg("frame_height_rel") ) );
        
        }
        { //::xfx::Texture::GetSurfaceData
        
            typedef ::HRESULT ( ::xfx::Texture::*get_surface_data_function_type )( ::DWORD,::xfx::ARGB * ) const;
            
            Texture_exposer.def( 
                "get_surface_data"
                , get_surface_data_function_type( &::xfx::Texture::GetSurfaceData )
                , ( bp::arg("level"), bp::arg("data") ) );
        
        }
        { //::xfx::Texture::LoadFile
        
            typedef ::HRESULT ( ::xfx::Texture::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( Texture_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            Texture_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::Texture::LoadFile)
                , default_load_file_function_type(&Texture_wrapper::default_load_file)
                , ( bp::arg("filename") ) );
        
        }
        { //::xfx::Texture::LoadMemory
        
            typedef ::HRESULT ( ::xfx::Texture::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( Texture_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            Texture_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::Texture::LoadMemory)
                , default_load_memory_function_type(&Texture_wrapper::default_load_memory)
                , ( bp::arg("pmemory"), bp::arg("filelen") ) );
        
        }
        { //::xfx::Texture::SetSurfaceData
        
            typedef ::HRESULT ( ::xfx::Texture::*set_surface_data_function_type )( ::DWORD,::xfx::ARGB * ) ;
            
            Texture_exposer.def( 
                "set_surface_data"
                , set_surface_data_function_type( &::xfx::Texture::SetSurfaceData )
                , ( bp::arg("level"), bp::arg("data") ) );
        
        }
        { //::xfx::Texture::UpdateTransformation
        
            typedef void ( ::xfx::Texture::*update_transformation_function_type )(  ) ;
            
            Texture_exposer.def( 
                "update_transformation"
                , update_transformation_function_type( &::xfx::Texture::UpdateTransformation ) );
        
        }
        { //::xfx::Texture::operator=
        
            typedef ::xfx::Texture & ( ::xfx::Texture::*assign_function_type )( ::xfx::Texture const & ) ;
            
            Texture_exposer.def( 
                "assign"
                , assign_function_type( &::xfx::Texture::operator= )
                , ( bp::arg("tex") )
                , bp::return_self< >() );
        
        }
        Texture_exposer.staticmethod( "get_frame_tex_coords" );
        { //property "width"[fget=::xfx::Texture::GetWidth]
        
            typedef unsigned int ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "width"
                , fget( &::xfx::Texture::GetWidth )
                , "get property, built on top of \"unsigned int xfx::Texture::GetWidth() const [member function]\"" );
        
        }
        { //property "height"[fget=::xfx::Texture::GetHeight]
        
            typedef unsigned int ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "height"
                , fget( &::xfx::Texture::GetHeight )
                , "get property, built on top of \"unsigned int xfx::Texture::GetHeight() const [member function]\"" );
        
        }
        { //property "texture_matrix"[fget=::xfx::Texture::GetTextureMatrix]
        
            typedef ::xfx::Mat4 const & ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "texture_matrix"
                , bp::make_function( 
                      fget( &::xfx::Texture::GetTextureMatrix )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Mat4 const & xfx::Texture::GetTextureMatrix() const [member function]\"" );
        
        }
        { //property "transformation"[fget=::xfx::Texture::GetTransformation]
        
            typedef ::xfx::Mat4 const & ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "transformation"
                , bp::make_function( 
                      fget( &::xfx::Texture::GetTransformation )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"xfx::Mat4 const & xfx::Texture::GetTransformation() const [member function]\"" );
        
        }
        { //property "identity_result_transform"[fget=::xfx::Texture::IsIdentityResultTransform]
        
            typedef bool ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "identity_result_transform"
                , fget( &::xfx::Texture::IsIdentityResultTransform )
                , "get property, built on top of \"bool xfx::Texture::IsIdentityResultTransform() const [member function]\"" );
        
        }
        { //property "num_mips"[fget=::xfx::Texture::NumMips]
        
            typedef unsigned int const & ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "num_mips"
                , bp::make_function( 
                      fget( &::xfx::Texture::NumMips )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"unsigned int const & xfx::Texture::NumMips() const [member function]\"" );
        
        }
        { //property "empty"[fget=::xfx::Texture::IsEmpty]
        
            typedef bool ( ::xfx::Texture::*fget )(  ) const;
            
            Texture_exposer.add_property( 
                "empty"
                , fget( &::xfx::Texture::IsEmpty )
                , "get property, built on top of \"bool xfx::Texture::IsEmpty() const [member function]\"" );
        
        }
        { //property "cache"[fget=::xfx::Texture::Cache]
        
            typedef ::xfx::Cache<xfx::Texture> & ( *fget )(  );
            
            Texture_exposer.add_static_property( 
                "cache"
                , bp::make_function( 
                      fget( &::xfx::Texture::Cache )
                    , bp::return_value_policy< bp::reference_existing_object >() )  );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Texture const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Texture >, boost::shared_ptr< xfx::Texture const > >( );
    }

}

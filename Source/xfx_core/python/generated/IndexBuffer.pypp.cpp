// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "indexbuffer.pypp.hpp"

namespace bp = boost::python;

void register_IndexBuffer_class(){

    { //::xfx::IndexBuffer
        typedef bp::class_< xfx::IndexBuffer, boost::noncopyable > IndexBuffer_exposer_t;
        IndexBuffer_exposer_t IndexBuffer_exposer = IndexBuffer_exposer_t( "IndexBuffer", bp::init< >() );
        bp::scope IndexBuffer_scope( IndexBuffer_exposer );
        { //::xfx::IndexBuffer::Create
        
            typedef ::HRESULT ( ::xfx::IndexBuffer::*create_function_type )( bool const &,unsigned int const &,bool const & ) ;
            
            IndexBuffer_exposer.def( 
                "create"
                , create_function_type( &::xfx::IndexBuffer::Create )
                , ( bp::arg("is32bit"), bp::arg("numindices"), bp::arg("dynamic") ) );
        
        }
        { //::xfx::IndexBuffer::Destroy
        
            typedef void ( ::xfx::IndexBuffer::*destroy_function_type )(  ) ;
            
            IndexBuffer_exposer.def( 
                "destroy"
                , destroy_function_type( &::xfx::IndexBuffer::Destroy ) );
        
        }
        { //::xfx::IndexBuffer::InvalidateCallback
        
            typedef void ( ::xfx::IndexBuffer::*invalidate_callback_function_type )( bool ) ;
            
            IndexBuffer_exposer.def( 
                "invalidate_callback"
                , invalidate_callback_function_type( &::xfx::IndexBuffer::InvalidateCallback )
                , ( bp::arg("invalidate") ) );
        
        }
        { //::xfx::IndexBuffer::SetIndices
        
            typedef void ( ::xfx::IndexBuffer::*set_indices_function_type )(  ) const;
            
            IndexBuffer_exposer.def( 
                "set_indices"
                , set_indices_function_type( &::xfx::IndexBuffer::SetIndices ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::IndexBuffer const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::IndexBuffer >, boost::shared_ptr< xfx::IndexBuffer const > >( );
    }

}

// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "argb.pypp.hpp"

namespace bp = boost::python;

void register_ARGB_class(){

    { //::xfx::ARGB
        typedef bp::class_< xfx::ARGB > ARGB_exposer_t;
        ARGB_exposer_t ARGB_exposer = ARGB_exposer_t( "ARGB", bp::init< >() );
        bp::scope ARGB_scope( ARGB_exposer );
        ARGB_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("a0"), bp::arg("r0"), bp::arg("g0"), bp::arg("b0") )) );
        { //::xfx::ARGB::Interpolate
        
            typedef ::xfx::ARGB ( *interpolate_function_type )( ::xfx::ARGB const &,::xfx::ARGB const &,float );
            
            ARGB_exposer.def( 
                "interpolate"
                , interpolate_function_type( &::xfx::ARGB::Interpolate )
                , ( bp::arg("col1"), bp::arg("col2"), bp::arg("t") ) );
        
        }
        { //::xfx::ARGB::ToString
        
            typedef ::xfx::String ( ::xfx::ARGB::*__repr___function_type )(  ) const;
            
            ARGB_exposer.def( 
                "__repr__"
                , __repr___function_type( &::xfx::ARGB::ToString ) );
        
        }
        ARGB_exposer.def_readwrite( "a", &xfx::ARGB::a );
        ARGB_exposer.def_readwrite( "b", &xfx::ARGB::b );
        ARGB_exposer.def_readwrite( "g", &xfx::ARGB::g );
        ARGB_exposer.def_readwrite( "r", &xfx::ARGB::r );
        ARGB_exposer.staticmethod( "interpolate" );
        ARGB_exposer.def( bp::self * bp::other< float >() );
        ARGB_exposer.def( bp::self * bp::self );
        ARGB_exposer.def( bp::self + bp::self );
        ARGB_exposer.def( bp::self - bp::self );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::ARGB const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::ARGB >, boost::shared_ptr< xfx::ARGB const > >( );
    }

}

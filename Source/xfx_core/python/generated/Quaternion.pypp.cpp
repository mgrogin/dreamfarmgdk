// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "quaternion.pypp.hpp"

namespace bp = boost::python;

void register_Quaternion_class(){

    { //::xfx::Quaternion
        typedef bp::class_< xfx::Quaternion > Quaternion_exposer_t;
        Quaternion_exposer_t Quaternion_exposer = Quaternion_exposer_t( "Quaternion", bp::init< >() );
        bp::scope Quaternion_scope( Quaternion_exposer );
        Quaternion_exposer.def( bp::init< float, float, float, float >(( bp::arg("_x"), bp::arg("_y"), bp::arg("_z"), bp::arg("_w") )) );
        Quaternion_exposer.def( bp::init< xfx::Vec3 const &, short int const & >(( bp::arg("axis"), bp::arg("angle") )) );
        { //::xfx::Quaternion::Dot
        
            typedef float ( *dot_function_type )( ::xfx::Quaternion const &,::xfx::Quaternion const & );
            
            Quaternion_exposer.def( 
                "dot"
                , dot_function_type( &::xfx::Quaternion::Dot )
                , ( bp::arg("u"), bp::arg("v") ) );
        
        }
        { //::xfx::Quaternion::FromAxisAngle
        
            typedef ::xfx::Quaternion & ( ::xfx::Quaternion::*from_axis_angle_function_type )( ::xfx::Vec3 const &,short int const & ) ;
            
            Quaternion_exposer.def( 
                "from_axis_angle"
                , from_axis_angle_function_type( &::xfx::Quaternion::FromAxisAngle )
                , ( bp::arg("axis"), bp::arg("angle") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Quaternion::Inverse
        
            typedef void ( ::xfx::Quaternion::*inverse_function_type )(  ) ;
            
            Quaternion_exposer.def( 
                "inverse"
                , inverse_function_type( &::xfx::Quaternion::Inverse ) );
        
        }
        { //::xfx::Quaternion::Normalize
        
            typedef void ( ::xfx::Quaternion::*normalize_function_type )(  ) ;
            
            Quaternion_exposer.def( 
                "normalize"
                , normalize_function_type( &::xfx::Quaternion::Normalize ) );
        
        }
        { //::xfx::Quaternion::Slerp
        
            typedef ::xfx::Quaternion ( *slerp_function_type )( ::xfx::Quaternion const &,::xfx::Quaternion const &,float );
            
            Quaternion_exposer.def( 
                "slerp"
                , slerp_function_type( &::xfx::Quaternion::Slerp )
                , ( bp::arg("u"), bp::arg("v"), bp::arg("t") ) );
        
        }
        { //::xfx::Quaternion::ToAxisAngle
        
            typedef ::boost::tuples::tuple< xfx::Vec3, short int, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::xfx::Quaternion::*to_axis_angle_function_type )(  ) ;
            
            Quaternion_exposer.def( 
                "to_axis_angle"
                , to_axis_angle_function_type( &::xfx::Quaternion::ToAxisAngle ) );
        
        }
        { //::xfx::Quaternion::ToMat4
        
            typedef ::xfx::Mat4 ( ::xfx::Quaternion::*to_mat4_function_type )(  ) ;
            
            Quaternion_exposer.def( 
                "to_mat4"
                , to_mat4_function_type( &::xfx::Quaternion::ToMat4 ) );
        
        }
        Quaternion_exposer.def( bp::self *= bp::other< float >() );
        Quaternion_exposer.def( bp::self *= bp::self );
        Quaternion_exposer.def( bp::self += bp::self );
        Quaternion_exposer.def( -bp::self );
        Quaternion_exposer.def( bp::self -= bp::self );
        Quaternion_exposer.def( bp::self /= bp::other< float >() );
        { //::xfx::Quaternion::xyzw
        
            typedef void ( ::xfx::Quaternion::*xyzw_function_type )( float,float,float,float ) ;
            
            Quaternion_exposer.def( 
                "xyzw"
                , xyzw_function_type( &::xfx::Quaternion::xyzw )
                , ( bp::arg("_x"), bp::arg("_y"), bp::arg("_z"), bp::arg("_w") ) );
        
        }
        Quaternion_exposer.def_readwrite( "w", &xfx::Quaternion::w );
        Quaternion_exposer.def_readwrite( "x", &xfx::Quaternion::x );
        Quaternion_exposer.def_readwrite( "y", &xfx::Quaternion::y );
        Quaternion_exposer.def_readwrite( "z", &xfx::Quaternion::z );
        Quaternion_exposer.staticmethod( "dot" );
        Quaternion_exposer.staticmethod( "slerp" );
        { //property "len_sq"[fget=::xfx::Quaternion::LenSq]
        
            typedef float ( ::xfx::Quaternion::*fget )(  ) const;
            
            Quaternion_exposer.add_property( 
                "len_sq"
                , fget( &::xfx::Quaternion::LenSq )
                , "get property, built on top of \"float xfx::Quaternion::LenSq() const [member function]\"" );
        
        }
        { //property "len"[fget=::xfx::Quaternion::Len]
        
            typedef float ( ::xfx::Quaternion::*fget )(  ) const;
            
            Quaternion_exposer.add_property( 
                "len"
                , fget( &::xfx::Quaternion::Len )
                , "get property, built on top of \"float xfx::Quaternion::Len() const [member function]\"" );
        
        }
        { //property "normalized"[fget=::xfx::Quaternion::GetNormalized]
        
            typedef ::xfx::Quaternion ( ::xfx::Quaternion::*fget )(  ) const;
            
            Quaternion_exposer.add_property( 
                "normalized"
                , fget( &::xfx::Quaternion::GetNormalized )
                , "get property, built on top of \"xfx::Quaternion xfx::Quaternion::GetNormalized() const [member function]\"" );
        
        }
        { //property "inversed"[fget=::xfx::Quaternion::GetInversed]
        
            typedef ::xfx::Quaternion ( ::xfx::Quaternion::*fget )(  ) const;
            
            Quaternion_exposer.add_property( 
                "inversed"
                , fget( &::xfx::Quaternion::GetInversed )
                , "get property, built on top of \"xfx::Quaternion xfx::Quaternion::GetInversed() const [member function]\"" );
        
        }
        Quaternion_exposer.def( bp::self != bp::self );
        Quaternion_exposer.def( bp::self * bp::self );
        Quaternion_exposer.def( bp::self * bp::other< float >() );
        Quaternion_exposer.def( bp::other< float >() * bp::self );
        Quaternion_exposer.def( bp::self + bp::self );
        Quaternion_exposer.def( bp::self - bp::self );
        Quaternion_exposer.def( bp::self / bp::other< float >() );
        Quaternion_exposer.def( bp::self == bp::self );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Quaternion const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Quaternion >, boost::shared_ptr< xfx::Quaternion const > >( );
    }

}

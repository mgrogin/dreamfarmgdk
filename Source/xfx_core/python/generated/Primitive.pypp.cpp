// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "xfx_py_bindings.h"
#include "primitive.pypp.hpp"

namespace bp = boost::python;

struct Primitive_wrapper : xfx::Primitive, bp::wrapper< xfx::Primitive > {

    Primitive_wrapper()
    : xfx::Primitive()
      , bp::wrapper< xfx::Primitive >(){
        // null constructor
        
    }

    virtual void Projection( float & a, float & b, ::xfx::Vec3 const & axis ) const {
        bp::override func_projection = this->get_override( "projection" );
        func_projection( a, b, boost::ref(axis) );
    }

};

void register_Primitive_class(){

    { //::xfx::Primitive
        typedef bp::class_< Primitive_wrapper, boost::noncopyable > Primitive_exposer_t;
        Primitive_exposer_t Primitive_exposer = Primitive_exposer_t( "Primitive" );
        bp::scope Primitive_scope( Primitive_exposer );
        { //::xfx::Primitive::Projection
        
            typedef void ( ::xfx::Primitive::*projection_function_type )( float &,float &,::xfx::Vec3 const & ) const;
            
            Primitive_exposer.def( 
                "projection"
                , bp::pure_virtual( projection_function_type(&::xfx::Primitive::Projection) )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("axis") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Primitive const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Primitive >, boost::shared_ptr< xfx::Primitive const > >( );
    }

}

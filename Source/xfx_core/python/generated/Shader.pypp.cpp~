// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "shader.pypp.hpp"

namespace bp = boost::python;

struct Shader_wrapper : xfx::Shader, bp::wrapper< xfx::Shader > {

    Shader_wrapper( )
    : xfx::Shader( )
      , bp::wrapper< xfx::Shader >(){
        // null constructor
    
    }

    Shader_wrapper(::xfx::Shader const & shd )
    : xfx::Shader( boost::ref(shd) )
      , bp::wrapper< xfx::Shader >(){
        // copy constructor
    
    }

    virtual ::HRESULT LoadFile( ::xfx::String const & filename ) {
        if( bp::override func_load_file = this->get_override( "load_file" ) )
            return func_load_file( filename );
        else
            return this->xfx::Resource::LoadFile( filename );
    }
    
    
    ::HRESULT default_load_file( ::xfx::String const & filename ) {
        return xfx::Resource::LoadFile( filename );
    }

    virtual ::HRESULT LoadMemory( void const * pmemory, long unsigned int filelen ) {
        if( bp::override func_load_memory = this->get_override( "load_memory" ) )
            return func_load_memory( pmemory, filelen );
        else
            return this->xfx::ScriptResource::LoadMemory( pmemory, filelen );
    }
    
    
    ::HRESULT default_load_memory( void const * pmemory, long unsigned int filelen ) {
        return xfx::ScriptResource::LoadMemory( pmemory, filelen );
    }

};

void register_Shader_class(){

    { //::xfx::Shader
        typedef bp::class_< Shader_wrapper, bp::bases< xfx::ScriptResource > > Shader_exposer_t;
        Shader_exposer_t Shader_exposer = Shader_exposer_t( "Shader", bp::no_init );
        bp::scope Shader_scope( Shader_exposer );
        { //::xfx::Shader::TextureInfo
            typedef bp::class_< xfx::Shader::TextureInfo > TextureInfo_exposer_t;
            TextureInfo_exposer_t TextureInfo_exposer = TextureInfo_exposer_t( "TextureInfo" );
            bp::scope TextureInfo_scope( TextureInfo_exposer );
            TextureInfo_exposer.def_readwrite( "fps", &xfx::Shader::TextureInfo::fps );
            TextureInfo_exposer.def_readwrite( "frame_count", &xfx::Shader::TextureInfo::frame_count );
            TextureInfo_exposer.def_readwrite( "frame_height", &xfx::Shader::TextureInfo::frame_height );
            TextureInfo_exposer.def_readwrite( "frame_width", &xfx::Shader::TextureInfo::frame_width );
            TextureInfo_exposer.def_readwrite( "stage_name", &xfx::Shader::TextureInfo::stage_name );
            TextureInfo_exposer.def_readwrite( "texture", &xfx::Shader::TextureInfo::texture );
            bp::register_ptr_to_python< boost::shared_ptr< xfx::Shader::TextureInfo const > >( );
            bp::implicitly_convertible< boost::shared_ptr< xfx::Shader::TextureInfo >, boost::shared_ptr< xfx::Shader::TextureInfo const > >( );
        }
        Shader_exposer.def( bp::init< >() );
        Shader_exposer.def( bp::init< xfx::Shader const & >(( bp::arg("shd") )) );
        { //::xfx::Shader::AddTextureMap
        
            typedef int ( ::xfx::Shader::*add_texture_map_function_type )( ::xfx::Shader::TextureInfo const & ) ;
            
            Shader_exposer.def( 
                "add_texture_map"
                , add_texture_map_function_type( &::xfx::Shader::AddTextureMap )
                , ( bp::arg("tex_info") ) );
        
        }
        { //::xfx::Shader::GetTextureInfoOnStage
        
            typedef ::xfx::Shader::TextureInfo const * ( ::xfx::Shader::*get_texture_info_on_stage_function_type )( int const & ) const;
            
            Shader_exposer.def( 
                "get_texture_info_on_stage"
                , get_texture_info_on_stage_function_type( &::xfx::Shader::GetTextureInfoOnStage )
                , ( bp::arg("stage") )
                , bp::return_internal_reference< >() );
        
        }
        { //::xfx::Shader::GetTextureMap
        
            typedef ::boost::shared_ptr< xfx::ITexture const > ( ::xfx::Shader::*get_texture_map_function_type )( ::xfx::String const & ) const;
            
            Shader_exposer.def( 
                "get_texture_map"
                , get_texture_map_function_type( &::xfx::Shader::GetTextureMap )
                , ( bp::arg("name") ) );
        
        }
        { //::xfx::Shader::RemoveTextureMap
        
            typedef void ( ::xfx::Shader::*remove_texture_map_function_type )( ::xfx::String const & ) ;
            
            Shader_exposer.def( 
                "remove_texture_map"
                , remove_texture_map_function_type( &::xfx::Shader::RemoveTextureMap )
                , ( bp::arg("name") ) );
        
        }
        { //::xfx::Shader::RenderEffect
        
            typedef void ( ::xfx::Shader::*render_effect_function_type )( ::xfx::ShaderParams const &,::boost::function0< void > const & ) const;
            
            Shader_exposer.def( 
                "render_effect"
                , render_effect_function_type( &::xfx::Shader::RenderEffect )
                , ( bp::arg("consts"), bp::arg("render_fn") ) );
        
        }
        { //::xfx::Shader::operator=
        
            typedef ::xfx::Shader & ( ::xfx::Shader::*assign_function_type )( ::xfx::Shader const & ) ;
            
            Shader_exposer.def( 
                "assign"
                , assign_function_type( &::xfx::Shader::operator= )
                , ( bp::arg("shd") )
                , bp::return_self< >() );
        
        }
        Shader_exposer.def( bp::self == bp::self );
        { //::xfx::Resource::LoadFile
        
            typedef ::HRESULT ( ::xfx::Resource::*load_file_function_type )( ::xfx::String const & ) ;
            typedef ::HRESULT ( Shader_wrapper::*default_load_file_function_type )( ::xfx::String const & ) ;
            
            Shader_exposer.def( 
                "load_file"
                , load_file_function_type(&::xfx::Resource::LoadFile)
                , default_load_file_function_type(&Shader_wrapper::default_load_file)
                , ( bp::arg("filename") ) );
        
        }
        { //::xfx::ScriptResource::LoadMemory
        
            typedef ::HRESULT ( ::xfx::ScriptResource::*load_memory_function_type )( void const *,long unsigned int ) ;
            typedef ::HRESULT ( Shader_wrapper::*default_load_memory_function_type )( void const *,long unsigned int ) ;
            
            Shader_exposer.def( 
                "load_memory"
                , load_memory_function_type(&::xfx::ScriptResource::LoadMemory)
                , default_load_memory_function_type(&Shader_wrapper::default_load_memory)
                , ( bp::arg("pmemory"), bp::arg("filelen") ) );
        
        }
        { //property "effect_ptr"[fget=::xfx::Shader::GetEffectPtr, fset=::xfx::Shader::SetEffectPtr]
        
            typedef ::boost::shared_ptr<xfx::Effect const> const & ( ::xfx::Shader::*fget )(  ) const;
            typedef void ( ::xfx::Shader::*fset )( ::boost::shared_ptr<xfx::Effect const> const & ) ;
            
            Shader_exposer.add_property( 
                "effect_ptr"
                , bp::make_function( 
                      fget( &::xfx::Shader::GetEffectPtr )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::xfx::Shader::SetEffectPtr )
                , "get\\set property, built on top of \"boost::shared_ptr<xfx::Effect const> const & xfx::Shader::GetEffectPtr() const [member function]\" and \"void xfx::Shader::SetEffectPtr(boost::shared_ptr<xfx::Effect const> const & eff) [member function]\"" );
        
        }
        { //property "id"[fget=::xfx::Shader::ID]
        
            typedef int const & ( ::xfx::Shader::*fget )(  ) const;
            
            Shader_exposer.add_property( 
                "id"
                , bp::make_function( 
                      fget( &::xfx::Shader::ID )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"int const & xfx::Shader::ID() const [member function]\"" );
        
        }
        { //property "cache"[fget=::xfx::Shader::Cache]
        
            typedef ::xfx::Cache<xfx::Shader> & ( *fget )(  );
            
            Shader_exposer.add_static_property( 
                "cache"
                , bp::make_function( 
                      fget( &::xfx::Shader::Cache )
                    , bp::return_value_policy< bp::reference_existing_object >() )  );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Shader const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Shader >, boost::shared_ptr< xfx::Shader const > >( );
    }

}

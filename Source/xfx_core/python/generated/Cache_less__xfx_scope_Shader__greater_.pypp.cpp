// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "cache_less__xfx_scope_shader__greater_.pypp.hpp"

namespace bp = boost::python;

void register_Cache_less__xfx_scope_Shader__greater__class(){

    { //::xfx::Cache< xfx::Shader >
        typedef bp::class_< xfx::Cache< xfx::Shader > > Cache_less__xfx_scope_Shader__greater__exposer_t;
        Cache_less__xfx_scope_Shader__greater__exposer_t Cache_less__xfx_scope_Shader__greater__exposer = Cache_less__xfx_scope_Shader__greater__exposer_t( "Cache_less__xfx_scope_Shader__greater_", bp::init< >() );
        bp::scope Cache_less__xfx_scope_Shader__greater__scope( Cache_less__xfx_scope_Shader__greater__exposer );
        { //::xfx::Cache< xfx::Shader >::Clear
        
            typedef xfx::Cache< xfx::Shader > exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            Cache_less__xfx_scope_Shader__greater__exposer.def( 
                "clear"
                , clear_function_type( &::xfx::Cache< xfx::Shader >::Clear ) );
        
        }
        { //::xfx::Cache< xfx::Shader >::Register
        
            typedef xfx::Cache< xfx::Shader > exported_class_t;
            typedef ::boost::shared_ptr< xfx::Shader const > ( exported_class_t::*register_function_type )( ::std::string const & ) ;
            
            Cache_less__xfx_scope_Shader__greater__exposer.def( 
                "register"
                , register_function_type( &::xfx::Cache< xfx::Shader >::Register )
                , ( bp::arg("filename") ) );
        
        }
        { //::xfx::Cache< xfx::Shader >::Register
        
            typedef xfx::Cache< xfx::Shader > exported_class_t;
            typedef ::HRESULT ( exported_class_t::*register_function_type )( ::xfx::Shader &,::std::string const & ) ;
            
            Cache_less__xfx_scope_Shader__greater__exposer.def( 
                "register"
                , register_function_type( &::xfx::Cache< xfx::Shader >::Register )
                , ( bp::arg("object"), bp::arg("filename") ) );
        
        }
        { //::xfx::Cache< xfx::Shader >::ReloadAll
        
            typedef xfx::Cache< xfx::Shader > exported_class_t;
            typedef void ( exported_class_t::*reload_all_function_type )(  ) ;
            
            Cache_less__xfx_scope_Shader__greater__exposer.def( 
                "reload_all"
                , reload_all_function_type( &::xfx::Cache< xfx::Shader >::ReloadAll ) );
        
        }
        { //::xfx::Cache< xfx::Shader >::Unregister
        
            typedef xfx::Cache< xfx::Shader > exported_class_t;
            typedef void ( exported_class_t::*unregister_function_type )( ::boost::shared_ptr< xfx::Shader const > const & ) ;
            
            Cache_less__xfx_scope_Shader__greater__exposer.def( 
                "unregister"
                , unregister_function_type( &::xfx::Cache< xfx::Shader >::Unregister )
                , ( bp::arg("object") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Cache<xfx::Shader> const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Cache<xfx::Shader> >, boost::shared_ptr< xfx::Cache<xfx::Shader> const > >( );
    }

}

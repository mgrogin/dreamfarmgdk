// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "mat3.pypp.hpp"

namespace bp = boost::python;

void register_Mat3_class(){

    { //::xfx::Mat3
        typedef bp::class_< xfx::Mat3 > Mat3_exposer_t;
        Mat3_exposer_t Mat3_exposer = Mat3_exposer_t( "Mat3", bp::init< >() );
        bp::scope Mat3_scope( Mat3_exposer );
        Mat3_exposer.def( bp::init< float >(( bp::arg("v") )) );
        bp::implicitly_convertible< float, xfx::Mat3 >();
        Mat3_exposer.def( bp::init< float, float, float, float, float, float, float, float, float >(( bp::arg("_11"), bp::arg("_12"), bp::arg("_13"), bp::arg("_21"), bp::arg("_22"), bp::arg("_23"), bp::arg("_31"), bp::arg("_32"), bp::arg("_33") )) );
        Mat3_exposer.def( bp::init< xfx::Vec2 const &, short int const &, xfx::Vec2 const & >(( bp::arg("pos"), bp::arg("orientation"), bp::arg("scale") )) );
        { //::xfx::Mat3::Inverse
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*inverse_function_type )(  ) ;
            
            Mat3_exposer.def( 
                "inverse"
                , inverse_function_type( &::xfx::Mat3::Inverse )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::InverseAffine
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*inverse_affine_function_type )(  ) ;
            
            Mat3_exposer.def( 
                "inverse_affine"
                , inverse_affine_function_type( &::xfx::Mat3::InverseAffine )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::MakeIdentity
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*make_identity_function_type )(  ) ;
            
            Mat3_exposer.def( 
                "make_identity"
                , make_identity_function_type( &::xfx::Mat3::MakeIdentity )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::MakeRotation
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*make_rotation_function_type )( int ) ;
            
            Mat3_exposer.def( 
                "make_rotation"
                , make_rotation_function_type( &::xfx::Mat3::MakeRotation )
                , ( bp::arg("angle") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::MakeScale
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*make_scale_function_type )( ::xfx::Vec2 const & ) ;
            
            Mat3_exposer.def( 
                "make_scale"
                , make_scale_function_type( &::xfx::Mat3::MakeScale )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::Reset
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*reset_function_type )( ::xfx::Vec2 const &,short int const &,::xfx::Vec2 const & ) ;
            
            Mat3_exposer.def( 
                "reset"
                , reset_function_type( &::xfx::Mat3::Reset )
                , ( bp::arg("pos"), bp::arg("orientation"), bp::arg("scale") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::SetScale
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*set_scale_function_type )( ::xfx::Vec2 const & ) ;
            
            Mat3_exposer.def( 
                "set_scale"
                , set_scale_function_type( &::xfx::Mat3::SetScale )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::SetTranslation
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*set_translation_function_type )( ::xfx::Vec2 const & ) ;
            
            Mat3_exposer.def( 
                "set_translation"
                , set_translation_function_type( &::xfx::Mat3::SetTranslation )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::TransformCoord
        
            typedef ::xfx::Vec2 ( ::xfx::Mat3::*transform_coord_function_type )( ::xfx::Vec2 const & ) const;
            
            Mat3_exposer.def( 
                "transform_coord"
                , transform_coord_function_type( &::xfx::Mat3::TransformCoord )
                , ( bp::arg("v") ) );
        
        }
        { //::xfx::Mat3::TransformNormal
        
            typedef ::xfx::Vec2 ( ::xfx::Mat3::*transform_normal_function_type )( ::xfx::Vec2 const & ) const;
            
            Mat3_exposer.def( 
                "transform_normal"
                , transform_normal_function_type( &::xfx::Mat3::TransformNormal )
                , ( bp::arg("v") ) );
        
        }
        { //::xfx::Mat3::Translate
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*translate_function_type )( ::xfx::Vec2 const & ) ;
            
            Mat3_exposer.def( 
                "translate"
                , translate_function_type( &::xfx::Mat3::Translate )
                , ( bp::arg("l") )
                , bp::return_self< >() );
        
        }
        { //::xfx::Mat3::Transpose
        
            typedef ::xfx::Mat3 & ( ::xfx::Mat3::*transpose_function_type )(  ) ;
            
            Mat3_exposer.def( 
                "transpose"
                , transpose_function_type( &::xfx::Mat3::Transpose )
                , bp::return_self< >() );
        
        }
        Mat3_exposer.def( bp::self *= bp::self );
        { //property "expand_to_mat4"[fget=::xfx::Mat3::ExpandToMat4]
        
            typedef ::xfx::Mat4 ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "expand_to_mat4"
                , fget( &::xfx::Mat3::ExpandToMat4 )
                , "get property, built on top of \"xfx::Mat4 xfx::Mat3::ExpandToMat4() const [member function]\"" );
        
        }
        { //property "identity"[fget=::xfx::Mat3::IsIdentity]
        
            typedef bool ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "identity"
                , fget( &::xfx::Mat3::IsIdentity )
                , "get property, built on top of \"bool xfx::Mat3::IsIdentity() const [member function]\"" );
        
        }
        { //property "transposed"[fget=::xfx::Mat3::GetTransposed]
        
            typedef ::xfx::Mat3 ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "transposed"
                , fget( &::xfx::Mat3::GetTransposed )
                , "get property, built on top of \"xfx::Mat3 xfx::Mat3::GetTransposed() const [member function]\"" );
        
        }
        { //property "inversed"[fget=::xfx::Mat3::GetInversed]
        
            typedef ::xfx::Mat3 ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "inversed"
                , fget( &::xfx::Mat3::GetInversed )
                , "get property, built on top of \"xfx::Mat3 xfx::Mat3::GetInversed() const [member function]\"" );
        
        }
        { //property "inversed_affine"[fget=::xfx::Mat3::GetInversedAffine]
        
            typedef ::xfx::Mat3 ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "inversed_affine"
                , fget( &::xfx::Mat3::GetInversedAffine )
                , "get property, built on top of \"xfx::Mat3 xfx::Mat3::GetInversedAffine() const [member function]\"" );
        
        }
        { //property "translation"[fget=::xfx::Mat3::GetTranslation]
        
            typedef ::xfx::Vec2 ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "translation"
                , fget( &::xfx::Mat3::GetTranslation )
                , "get property, built on top of \"xfx::Vec2 xfx::Mat3::GetTranslation() const [member function]\"" );
        
        }
        { //property "scale"[fget=::xfx::Mat3::GetScale]
        
            typedef ::xfx::Vec2 ( ::xfx::Mat3::*fget )(  ) const;
            
            Mat3_exposer.add_property( 
                "scale"
                , fget( &::xfx::Mat3::GetScale )
                , "get property, built on top of \"xfx::Vec2 xfx::Mat3::GetScale() const [member function]\"" );
        
        }
        Mat3_exposer.def( bp::self * bp::self );
        bp::register_ptr_to_python< boost::shared_ptr< xfx::Mat3 const > >( );
        bp::implicitly_convertible< boost::shared_ptr< xfx::Mat3 >, boost::shared_ptr< xfx::Mat3 const > >( );
    }

}

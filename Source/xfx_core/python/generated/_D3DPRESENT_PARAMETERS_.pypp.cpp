// This file has been generated by Py++.

#include "xfx.h"
#include "boost/python.hpp"
#include "xfx_py_bindings.h"
#include "_d3dpresent_parameters_.pypp.hpp"

namespace bp = boost::python;

struct _D3DPRESENT_PARAMETERS__wrapper : _D3DPRESENT_PARAMETERS_, bp::wrapper< _D3DPRESENT_PARAMETERS_ > {

    _D3DPRESENT_PARAMETERS__wrapper(_D3DPRESENT_PARAMETERS_ const & arg )
    : _D3DPRESENT_PARAMETERS_( arg )
      , bp::wrapper< _D3DPRESENT_PARAMETERS_ >(){
        // copy constructor
        
    }

    _D3DPRESENT_PARAMETERS__wrapper()
    : _D3DPRESENT_PARAMETERS_()
      , bp::wrapper< _D3DPRESENT_PARAMETERS_ >(){
        // null constructor
        
    }

    static ::HWND get_hDeviceWindow(_D3DPRESENT_PARAMETERS_ const & inst ){
        return inst.hDeviceWindow;
    }
    
    static void set_hDeviceWindow( _D3DPRESENT_PARAMETERS_ & inst, ::HWND new_value ){ 
        inst.hDeviceWindow = new_value;
    }

};

void register__D3DPRESENT_PARAMETERS__class(){

    bp::class_< _D3DPRESENT_PARAMETERS__wrapper >( "_D3DPRESENT_PARAMETERS_" )    
        .def_readwrite( "auto_depth_stencil_format", &_D3DPRESENT_PARAMETERS_::AutoDepthStencilFormat )    
        .def_readwrite( "back_buffer_count", &_D3DPRESENT_PARAMETERS_::BackBufferCount )    
        .def_readwrite( "back_buffer_format", &_D3DPRESENT_PARAMETERS_::BackBufferFormat )    
        .def_readwrite( "back_buffer_height", &_D3DPRESENT_PARAMETERS_::BackBufferHeight )    
        .def_readwrite( "back_buffer_width", &_D3DPRESENT_PARAMETERS_::BackBufferWidth )    
        .def_readwrite( "enable_auto_depth_stencil", &_D3DPRESENT_PARAMETERS_::EnableAutoDepthStencil )    
        .def_readwrite( "flags", &_D3DPRESENT_PARAMETERS_::Flags )    
        .def_readwrite( "full_screen__refresh_rate_in_hz", &_D3DPRESENT_PARAMETERS_::FullScreen_RefreshRateInHz )    
        .def_readwrite( "multi_sample_quality", &_D3DPRESENT_PARAMETERS_::MultiSampleQuality )    
        .def_readwrite( "multi_sample_type", &_D3DPRESENT_PARAMETERS_::MultiSampleType )    
        .def_readwrite( "presentation_interval", &_D3DPRESENT_PARAMETERS_::PresentationInterval )    
        .def_readwrite( "swap_effect", &_D3DPRESENT_PARAMETERS_::SwapEffect )    
        .def_readwrite( "windowed", &_D3DPRESENT_PARAMETERS_::Windowed )    
        .add_property( "h_device_window"
                    , bp::make_function( (::HWND (*)( ::_D3DPRESENT_PARAMETERS_ const & ))(&_D3DPRESENT_PARAMETERS__wrapper::get_hDeviceWindow), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::_D3DPRESENT_PARAMETERS_ &,::HWND ))(&_D3DPRESENT_PARAMETERS__wrapper::set_hDeviceWindow), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );

}
